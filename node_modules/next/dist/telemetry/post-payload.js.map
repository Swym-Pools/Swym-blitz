{"version":3,"sources":["../../telemetry/post-payload.ts"],"names":["_postPayload","data","lines","writeField","key","value","length","undefined","nextVersion","blitzVersion","meta","event","events","eventName","Object","entries","context","fields","method","body","headers","Authorization","timeout","then","res","ok","err","Error","statusText","response","minTimeout","retries","factor","catch"],"mappings":"uEAAA,kFACA,6D,mFASO,QAASA,CAAAA,YAAT,CAAsBC,IAAtB,CAAkC,CACvC,GAAIC,CAAAA,KAAK,CAAG,EAAZ,CAEA,QAASC,CAAAA,UAAT,CAAoBC,GAApB,CAAiCC,KAAjC,CAAiD,CAC/C,GAAIH,KAAK,CAACA,KAAK,CAACI,MAAN,CAAe,CAAhB,CAAL,GAA4B,GAAhC,CAAqC,CACnCJ,KAAK,EAAI,GAAT,CACD,CACD,GAAIG,KAAK,GAAK,IAAV,EAAkBA,KAAK,GAAKE,SAAhC,CAA2C,CACzCL,KAAK,EAAK,GAAEE,GAAI,QAAhB,CACD,CAFD,IAEO,IAAI,MAAOC,CAAAA,KAAP,GAAiB,QAArB,CAA+B,CACpCH,KAAK,EAAK,GAAEE,GAAI,WAAhB,CACD,CAFM,IAEA,IAAI,MAAOC,CAAAA,KAAP,GAAiB,QAArB,CAA+B,CACpCH,KAAK,EAAK,GAAEE,GAAI,KAAIC,KAAM,GAA1B,CACD,CAFM,IAEA,CACLH,KAAK,EAAK,GAAEE,GAAI,IAAGC,KAAM,EAAzB,CACD,CACF,CAED,KAAM,CAAEG,WAAW,CAAEC,YAAf,CAA6B,GAAGC,IAAhC,EAAyCT,IAAI,CAACS,IAApD,CAEA,IAAK,GAAIC,CAAAA,KAAT,GAAkBV,CAAAA,IAAI,CAACW,MAAvB,CAA+B,CAC7B;AACA,GAAIV,KAAJ,CAAW,CACTA,KAAK,EAAI,IAAT,CACD,CAED;AACAA,KAAK,EAAIS,KAAK,CAACE,SAAf,CAEA;AACAX,KAAK,EAAK,kBAAiBO,YAAa,GAAxC,CAEA;AACAP,KAAK,EAAI,GAAT,CAEA;AACA;AACA,IAAK,GAAI,CAACE,GAAD,CAAMC,KAAN,CAAT,EAAyBS,CAAAA,MAAM,CAACC,OAAP,CAAed,IAAI,CAACe,OAApB,CAAzB,CAAuD,CACrDb,UAAU,CAACC,GAAD,CAAMC,KAAN,CAAV,CACD,CACD;AACA,IAAK,GAAI,CAACD,GAAD,CAAMC,KAAN,CAAT,EAAyBS,CAAAA,MAAM,CAACC,OAAP,CAAeJ,KAAK,CAACM,MAArB,CAAzB,CAAuD,CACrDd,UAAU,CAACC,GAAD,CAAMC,KAAN,CAAV,CACD,CACD;AACA,IAAK,GAAI,CAACD,GAAD,CAAMC,KAAN,CAAT,EAAyBS,CAAAA,MAAM,CAACC,OAAP,CAAeL,IAAf,CAAzB,CAA+C,CAC7CP,UAAU,CAACC,GAAD,CAAMC,KAAN,CAAV,CACD,CACF,CAED,MACE,wBACE,IACE,uBACG,qFADH,CAEE,CACEa,MAAM,CAAE,MADV,CAEEC,IAAI,CAAEjB,KAFR,CAGEkB,OAAO,CAAE,CACPC,aAAa,CACX,gGAFK,CAHX,CAOEC,OAAO,CAAE,IAPX,CAFF,EAWEC,IAXF,CAWO,KAAOC,CAAAA,GAAP,EAAe,CACpB,GAAI,CAACA,GAAG,CAACC,EAAT,CAAa,CACX,KAAMC,CAAAA,GAAG,CAAG,GAAIC,CAAAA,KAAJ,CAAUH,GAAG,CAACI,UAAd,CAAZ,CACEF,GAAD,CAAaG,QAAb,CAAwBL,GAAxB,CACD,KAAME,CAAAA,GAAN,CACD,CACF,CAjBD,CAFJ,CAoBE,CAAEI,UAAU,CAAE,GAAd,CAAmBC,OAAO,CAAE,CAA5B,CAA+BC,MAAM,CAAE,CAAvC,CApBF,EAsBGC,KAtBH,CAsBS,IAAM,CACX;AACD,CAxBH,CAyBE;AAzBF,CA0BGV,IA1BH,CA2BI,IAAM,CAAE,CA3BZ,CA4BI,IAAM,CAAE,CA5BZ,CADF,CAgCD","sourcesContent":["import retry from 'next/dist/compiled/async-retry'\nimport fetch from 'node-fetch'\nimport { EventBatchShape, EventContext, EventMeta } from './storage'\n\nexport interface Data {\n  context: EventContext\n  meta: EventMeta\n  events: EventBatchShape[]\n}\n\nexport function _postPayload(data: Data) {\n  let lines = ''\n\n  function writeField(key: string, value: unknown) {\n    if (lines[lines.length - 1] !== ' ') {\n      lines += ','\n    }\n    if (value === null || value === undefined) {\n      lines += `${key}=false`\n    } else if (typeof value === 'object') {\n      lines += `${key}=\"object\"`\n    } else if (typeof value === 'string') {\n      lines += `${key}=\"${value}\"`\n    } else {\n      lines += `${key}=${value}`\n    }\n  }\n\n  const { nextVersion: blitzVersion, ...meta } = data.meta\n\n  for (let event of data.events) {\n    // New line\n    if (lines) {\n      lines += '\\n'\n    }\n\n    // Measurement name\n    lines += event.eventName\n\n    // Add tags\n    lines += `,blitzVersion=\"${blitzVersion}\"`\n\n    // Separate tags + fields\n    lines += ' '\n\n    // Add fields\n    // from context\n    for (let [key, value] of Object.entries(data.context)) {\n      writeField(key, value)\n    }\n    // from event.fields\n    for (let [key, value] of Object.entries(event.fields)) {\n      writeField(key, value)\n    }\n    // from meta\n    for (let [key, value] of Object.entries(meta)) {\n      writeField(key, value)\n    }\n  }\n\n  return (\n    retry(\n      () =>\n        fetch(\n          `https://us-east-1-1.aws.cloud2.influxdata.com/api/v2/write?org=blitz&bucket=blitzjs`,\n          {\n            method: 'POST',\n            body: lines,\n            headers: {\n              Authorization:\n                'Token T5T163w90SHAQCQWQhTiz9anQZqHsPCLRc8jgEL0CIYqqkuOi9tYq4zIzsKXv0uKqQWqLAn8240M9kAYD1Wbug==',\n            },\n            timeout: 5000,\n          }\n        ).then(async (res) => {\n          if (!res.ok) {\n            const err = new Error(res.statusText)\n            ;(err as any).response = res\n            throw err\n          }\n        }),\n      { minTimeout: 500, retries: 1, factor: 1 }\n    )\n      .catch(() => {\n        // We swallow errors when telemetry cannot be sent\n      })\n      // Ensure promise is voided\n      .then(\n        () => {},\n        () => {}\n      )\n  )\n}\n"]}