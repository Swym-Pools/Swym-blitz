"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLogs = void 0;
const node_1 = __importDefault(require("./node"));
const cache = [];
const MAX_LOGS = 100;
function Debug(namespace) {
    const debug = node_1.default(namespace, (...args) => {
        cache.push(args);
        // keeping 100 logs is just a heuristic. The real truncating comes later
        if (cache.length > MAX_LOGS) {
            cache.shift();
        }
    });
    return debug;
}
exports.default = Debug;
Debug.enable = (namespace) => {
    node_1.default.enable(namespace);
};
Debug.enabled = (namespace) => node_1.default.enabled(namespace);
// https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers
// we need some space for other characters, so we go for 30k here
function getLogs(numChars = 7500) {
    // flatmap on text level
    const output = cache
        .map((c) => c
        .map((item) => {
        if (typeof item === 'string') {
            return item;
        }
        return JSON.stringify(item);
    })
        .join('  '))
        .join('\n');
    if (output.length < numChars) {
        return output;
    }
    return output.slice(-numChars);
}
exports.getLogs = getLogs;
//# sourceMappingURL=index.js.map