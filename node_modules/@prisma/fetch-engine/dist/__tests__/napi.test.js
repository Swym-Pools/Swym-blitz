"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const del_1 = __importDefault(require("del"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const cleanupCache_1 = require("../cleanupCache");
const download_1 = require("../download");
const engines_version_1 = require("@prisma/engines-version");
const CURRENT_BINARIES_HASH = engines_version_1.enginesVersion;
jest.setTimeout(30000);
describe('download', () => {
    beforeEach(async () => {
        // completely clean up the cache and keep nothing
        await cleanupCache_1.cleanupCache(0);
        await del_1.default(__dirname + '/**/*engine*');
        await del_1.default(__dirname + '/**/prisma-fmt*');
    });
    afterEach(() => delete process.env.PRISMA_QUERY_ENGINE_BINARY);
    test('download all napi libraries & cache them', async () => {
        // Channel and Version are currently hardcoded
        const baseDir = path_1.default.join(__dirname, 'all');
        await download_1.download({
            binaries: {
                'libquery-engine-napi': baseDir,
            },
            binaryTargets: [
                'darwin',
                'debian-openssl-1.0.x',
                'debian-openssl-1.1.x',
                'linux-arm-openssl-1.0.x',
                'linux-arm-openssl-1.1.x',
                'rhel-openssl-1.0.x',
                'rhel-openssl-1.1.x',
                'windows',
                'linux-musl',
            ],
            version: CURRENT_BINARIES_HASH,
        });
        const files = getFiles(baseDir).map((f) => ({ ...f, size: 'X' }));
        expect(files).toMatchInlineSnapshot(`
      Array [
        Object {
          "name": ".gitkeep",
          "size": "X",
        },
        Object {
          "name": "libquery_engine_napi-darwin.dylib.node",
          "size": "X",
        },
        Object {
          "name": "libquery_engine_napi-debian-openssl-1.0.x.so.node",
          "size": "X",
        },
        Object {
          "name": "libquery_engine_napi-debian-openssl-1.1.x.so.node",
          "size": "X",
        },
        Object {
          "name": "libquery_engine_napi-linux-arm-openssl-1.0.x.so.node",
          "size": "X",
        },
        Object {
          "name": "libquery_engine_napi-linux-arm-openssl-1.1.x.so.node",
          "size": "X",
        },
        Object {
          "name": "libquery_engine_napi-linux-musl.so.node",
          "size": "X",
        },
        Object {
          "name": "libquery_engine_napi-rhel-openssl-1.0.x.so.node",
          "size": "X",
        },
        Object {
          "name": "libquery_engine_napi-rhel-openssl-1.1.x.so.node",
          "size": "X",
        },
        Object {
          "name": "query_engine_napi-windows.dll.node",
          "size": "X",
        },
      ]
    `);
    });
});
function getFiles(dir) {
    const files = fs_1.default.readdirSync(dir, 'utf8');
    return files.map((name) => {
        const size = fs_1.default.statSync(path_1.default.join(dir, name)).size;
        return { name, size };
    });
}
//# sourceMappingURL=napi.test.js.map