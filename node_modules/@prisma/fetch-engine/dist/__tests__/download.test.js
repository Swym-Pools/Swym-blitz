"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const download_1 = require("../download");
const get_platform_1 = require("@prisma/get-platform");
const cleanupCache_1 = require("../cleanupCache");
const engines_version_1 = require("@prisma/engines-version");
const del_1 = __importDefault(require("del"));
const strip_ansi_1 = __importDefault(require("strip-ansi"));
const CURRENT_BINARIES_HASH = engines_version_1.enginesVersion;
// From npx @prisma/cli@2.6.2 -v
const FIXED_BINARIES_HASH = '60c1d1e9396bf462eda7b97f8f65523bf65c9f5f';
jest.setTimeout(80000);
describe('download', () => {
    beforeEach(async () => {
        // completely clean up the cache and keep nothing
        await cleanupCache_1.cleanupCache(0);
        await del_1.default(__dirname + '/**/*engine*');
        await del_1.default(__dirname + '/**/prisma-fmt*');
    });
    afterEach(() => delete process.env.PRISMA_QUERY_ENGINE_BINARY);
    test('basic download', async () => {
        const platform = await get_platform_1.getPlatform();
        const queryEnginePath = path_1.default.join(__dirname, download_1.getBinaryName('query-engine', platform));
        const introspectionEnginePath = path_1.default.join(__dirname, download_1.getBinaryName('introspection-engine', platform));
        const migrationEnginePath = path_1.default.join(__dirname, download_1.getBinaryName('migration-engine', platform));
        const prismafmtPath = path_1.default.join(__dirname, download_1.getBinaryName('prisma-fmt', platform));
        await download_1.download({
            binaries: {
                'query-engine': __dirname,
                'introspection-engine': __dirname,
                'migration-engine': __dirname,
                'prisma-fmt': __dirname,
            },
            version: FIXED_BINARIES_HASH,
        });
        expect(await download_1.getVersion(queryEnginePath)).toMatchInlineSnapshot(`"query-engine 60c1d1e9396bf462eda7b97f8f65523bf65c9f5f"`);
        expect(await download_1.getVersion(introspectionEnginePath)).toMatchInlineSnapshot(`"introspection-core 60c1d1e9396bf462eda7b97f8f65523bf65c9f5f"`);
        expect(await download_1.getVersion(migrationEnginePath)).toMatchInlineSnapshot(`"migration-engine-cli 60c1d1e9396bf462eda7b97f8f65523bf65c9f5f"`);
        expect(await download_1.getVersion(prismafmtPath)).toMatchInlineSnapshot(`"prisma-fmt 60c1d1e9396bf462eda7b97f8f65523bf65c9f5f"`);
    });
    test('basic download all current binaries', async () => {
        const platform = await get_platform_1.getPlatform();
        const queryEnginePath = path_1.default.join(__dirname, download_1.getBinaryName('query-engine', platform));
        const introspectionEnginePath = path_1.default.join(__dirname, download_1.getBinaryName('introspection-engine', platform));
        const migrationEnginePath = path_1.default.join(__dirname, download_1.getBinaryName('migration-engine', platform));
        const prismafmtPath = path_1.default.join(__dirname, download_1.getBinaryName('prisma-fmt', platform));
        await download_1.download({
            binaries: {
                'query-engine': __dirname,
                'introspection-engine': __dirname,
                'migration-engine': __dirname,
                'prisma-fmt': __dirname,
            },
            binaryTargets: [
                'darwin',
                'debian-openssl-1.0.x',
                'debian-openssl-1.1.x',
                'linux-arm-openssl-1.0.x',
                'linux-arm-openssl-1.1.x',
                'rhel-openssl-1.0.x',
                'rhel-openssl-1.1.x',
                'windows',
                'linux-musl',
            ],
            version: CURRENT_BINARIES_HASH,
        });
        // Check that all binaries git hash are the same
        expect(await download_1.getVersion(queryEnginePath)).toContain(CURRENT_BINARIES_HASH);
        expect(await download_1.getVersion(introspectionEnginePath)).toContain(CURRENT_BINARIES_HASH);
        expect(await download_1.getVersion(migrationEnginePath)).toContain(CURRENT_BINARIES_HASH);
        expect(await download_1.getVersion(prismafmtPath)).toContain(CURRENT_BINARIES_HASH);
    });
    test('auto heal corrupt binary', async () => {
        const platform = await get_platform_1.getPlatform();
        const baseDir = path_1.default.join(__dirname, 'corruption');
        const targetPath = path_1.default.join(baseDir, download_1.getBinaryName('query-engine', platform));
        if (fs_1.default.existsSync(targetPath)) {
            try {
                fs_1.default.unlinkSync(targetPath);
            }
            catch (e) {
                console.error(e);
            }
        }
        await download_1.download({
            binaries: {
                'query-engine': baseDir,
            },
            version: FIXED_BINARIES_HASH,
        });
        fs_1.default.writeFileSync(targetPath, 'incorrect-binary');
        // please heal it
        await download_1.download({
            binaries: {
                'query-engine': baseDir,
            },
            version: FIXED_BINARIES_HASH,
        });
        expect(fs_1.default.existsSync(targetPath)).toBe(true);
        expect(await download_1.checkVersionCommand(targetPath)).toBe(true);
    });
    test('handle non-existent binary target', async () => {
        await expect(download_1.download({
            binaries: {
                'query-engine': __dirname,
            },
            version: FIXED_BINARIES_HASH,
            binaryTargets: ['darwin', 'marvin'], // eslint-disable-line @typescript-eslint/no-explicit-any
        })).rejects.toThrowErrorMatchingInlineSnapshot(`"Unknown binaryTarget marvin and no custom binaries were provided"`);
    });
    test.skip('handle non-existent binary target with missing custom binaries', async () => {
        expect.assertions(1);
        process.env.PRISMA_QUERY_ENGINE_BINARY = '../query-engine';
        try {
            await download_1.download({
                binaries: {
                    'query-engine': __dirname,
                },
                version: FIXED_BINARIES_HASH,
                binaryTargets: ['darwin', 'marvin'], // eslint-disable-line @typescript-eslint/no-explicit-any
            });
        }
        catch (err) {
            expect(strip_ansi_1.default(err.message)).toMatchInlineSnapshot(`"Env var PRISMA_QUERY_ENGINE_BINARY is provided but provided path ../query-engine can't be resolved."`);
        }
    });
    test.skip('handle non-existent binary target with custom binaries', async () => {
        const e = await download_1.download({
            binaries: {
                'query-engine': __dirname,
            },
        });
        const dummyPath = e['query-engine'][Object.keys(e['query-engine'])[0]];
        const targetPath = path_1.default.join(__dirname, 
        // @ts-ignore
        download_1.getBinaryName('query-engine', 'marvin'));
        fs_1.default.copyFileSync(dummyPath, targetPath);
        process.env.PRISMA_QUERY_ENGINE_BINARY = targetPath;
        const testResult = await download_1.download({
            binaries: {
                'query-engine': path_1.default.join(__dirname, 'all'),
            },
            binaryTargets: ['marvin'], // eslint-disable-line @typescript-eslint/no-explicit-any
        });
        expect(testResult['query-engine']['marvin']).toEqual(targetPath);
    });
    test.skip('download all binaries & cache them', async () => {
        const baseDir = path_1.default.join(__dirname, 'all');
        await download_1.download({
            binaries: {
                'query-engine': baseDir,
                'introspection-engine': baseDir,
                'migration-engine': baseDir,
                'prisma-fmt': baseDir,
            },
            binaryTargets: [
                'darwin',
                'debian-openssl-1.0.x',
                'debian-openssl-1.1.x',
                'linux-arm-openssl-1.0.x',
                'linux-arm-openssl-1.1.x',
                'rhel-openssl-1.0.x',
                'rhel-openssl-1.1.x',
                'windows',
                'linux-musl',
            ],
            version: FIXED_BINARIES_HASH,
        });
        const files = getFiles(baseDir);
        expect(files).toMatchInlineSnapshot(`
      Array [
        Object {
          "name": ".gitkeep",
          "size": 0,
        },
        Object {
          "name": "introspection-engine-darwin",
          "size": 14441124,
        },
        Object {
          "name": "introspection-engine-debian-openssl-1.0.x",
          "size": 18215968,
        },
        Object {
          "name": "introspection-engine-debian-openssl-1.1.x",
          "size": 18193328,
        },
        Object {
          "name": "introspection-engine-linux-arm-openssl-1.0.x",
          "size": 19738920,
        },
        Object {
          "name": "introspection-engine-linux-arm-openssl-1.1.x",
          "size": 20491832,
        },
        Object {
          "name": "introspection-engine-linux-musl",
          "size": 20329048,
        },
        Object {
          "name": "introspection-engine-rhel-openssl-1.0.x",
          "size": 21896007,
        },
        Object {
          "name": "introspection-engine-rhel-openssl-1.1.x",
          "size": 21875399,
        },
        Object {
          "name": "introspection-engine-windows.exe",
          "size": 12485632,
        },
        Object {
          "name": "migration-engine-darwin",
          "size": 18975644,
        },
        Object {
          "name": "migration-engine-debian-openssl-1.0.x",
          "size": 23028784,
        },
        Object {
          "name": "migration-engine-debian-openssl-1.1.x",
          "size": 23033760,
        },
        Object {
          "name": "migration-engine-linux-arm-openssl-1.0.x",
          "size": 23981944,
        },
        Object {
          "name": "migration-engine-linux-arm-openssl-1.1.x",
          "size": 24759784,
        },
        Object {
          "name": "migration-engine-linux-musl",
          "size": 24931256,
        },
        Object {
          "name": "migration-engine-rhel-openssl-1.0.x",
          "size": 26791914,
        },
        Object {
          "name": "migration-engine-rhel-openssl-1.1.x",
          "size": 26760749,
        },
        Object {
          "name": "migration-engine-windows.exe",
          "size": 16921088,
        },
        Object {
          "name": "prisma-fmt-darwin",
          "size": 4079652,
        },
        Object {
          "name": "prisma-fmt-debian-openssl-1.0.x",
          "size": 7340056,
        },
        Object {
          "name": "prisma-fmt-debian-openssl-1.1.x",
          "size": 7340056,
        },
        Object {
          "name": "prisma-fmt-linux-arm-openssl-1.0.x",
          "size": 7164168,
        },
        Object {
          "name": "prisma-fmt-linux-arm-openssl-1.1.x",
          "size": 7164168,
        },
        Object {
          "name": "prisma-fmt-linux-musl",
          "size": 6943176,
        },
        Object {
          "name": "prisma-fmt-rhel-openssl-1.0.x",
          "size": 11292208,
        },
        Object {
          "name": "prisma-fmt-rhel-openssl-1.1.x",
          "size": 11292208,
        },
        Object {
          "name": "prisma-fmt-windows.exe",
          "size": 3368448,
        },
        Object {
          "name": "query-engine-darwin",
          "size": 20634380,
        },
        Object {
          "name": "query-engine-debian-openssl-1.0.x",
          "size": 24912272,
        },
        Object {
          "name": "query-engine-debian-openssl-1.1.x",
          "size": 24889272,
        },
        Object {
          "name": "query-engine-linux-arm-openssl-1.0.x",
          "size": 25714016,
        },
        Object {
          "name": "query-engine-linux-arm-openssl-1.1.x",
          "size": 26463072,
        },
        Object {
          "name": "query-engine-linux-musl",
          "size": 26741432,
        },
        Object {
          "name": "query-engine-rhel-openssl-1.0.x",
          "size": 28520235,
        },
        Object {
          "name": "query-engine-rhel-openssl-1.1.x",
          "size": 28500195,
        },
        Object {
          "name": "query-engine-windows.exe",
          "size": 18685440,
        },
      ]
    `);
        await del_1.default(baseDir + '/*engine*');
        await del_1.default(baseDir + '/prisma-fmt*');
        const before = Date.now();
        await download_1.download({
            binaries: {
                'query-engine': baseDir,
                'introspection-engine': baseDir,
                'migration-engine': baseDir,
                'prisma-fmt': baseDir,
            },
            binaryTargets: [
                'darwin',
                'debian-openssl-1.0.x',
                'debian-openssl-1.1.x',
                'linux-arm-openssl-1.0.x',
                'linux-arm-openssl-1.1.x',
                'rhel-openssl-1.0.x',
                'rhel-openssl-1.1.x',
                'windows',
                'linux-musl',
            ],
            version: FIXED_BINARIES_HASH,
        });
        const after = Date.now();
        // cache should take less than 2s
        // value on Mac: 1440
        // value on GH Actions: ~5812
        const took = after - before;
        expect(took).toBeLessThan(20000);
        const before2 = Date.now();
        await download_1.download({
            binaries: {
                'query-engine': baseDir,
                'introspection-engine': baseDir,
                'migration-engine': baseDir,
                'prisma-fmt': baseDir,
            },
            binaryTargets: [
                'darwin',
                'debian-openssl-1.0.x',
                'debian-openssl-1.1.x',
                'linux-arm-openssl-1.0.x',
                'linux-arm-openssl-1.1.x',
                'rhel-openssl-1.0.x',
                'rhel-openssl-1.1.x',
                'windows',
                'linux-musl',
            ],
            version: FIXED_BINARIES_HASH,
        });
        const after2 = Date.now();
        // value on Mac: 33ms
        // value on GH Actions: ?
        // https://github.com/prisma/prisma/runs/1176632754
        const took2 = after2 - before2;
        expect(took2).toBeLessThan(10000);
    });
});
function getFiles(dir) {
    const files = fs_1.default.readdirSync(dir, 'utf8');
    return files.map((name) => {
        const size = fs_1.default.statSync(path_1.default.join(dir, name)).size;
        return { name, size };
    });
}
//# sourceMappingURL=download.test.js.map