import { RustLog, RustError } from './log';
import { ConnectorType } from '@prisma/generator-helper';
export interface RequestError {
    error: string;
    user_facing_error: {
        is_panic: boolean;
        message: string;
        meta?: object;
        error_code?: string;
    };
}
export declare class PrismaClientKnownRequestError extends Error {
    code: string;
    meta?: object;
    clientVersion: string;
    constructor(message: string, code: string, clientVersion: string, meta?: any);
    get [Symbol.toStringTag](): string;
}
export declare class PrismaClientUnknownRequestError extends Error {
    clientVersion: string;
    constructor(message: string, clientVersion: string);
    get [Symbol.toStringTag](): string;
}
export declare class PrismaClientRustPanicError extends Error {
    clientVersion: string;
    constructor(message: string, clientVersion: string);
    get [Symbol.toStringTag](): string;
}
export declare type PrismaClientRustErrorArgs = {
    clientVersion: string;
    log?: RustLog;
    error?: RustError;
};
/**
 * A generic Prisma Client Rust error.
 * This error is being exposed via the `prisma.$on('error')` interface
 */
export declare class PrismaClientRustError extends Error {
    clientVersion: string;
    constructor({ clientVersion, log, error }: PrismaClientRustErrorArgs);
    get [Symbol.toStringTag](): string;
}
export declare class PrismaClientInitializationError extends Error {
    clientVersion: string;
    errorCode?: string;
    constructor(message: string, clientVersion: string, errorCode?: string);
    get [Symbol.toStringTag](): string;
}
export interface ErrorWithLinkInput {
    version: string;
    engineVersion?: string;
    database?: ConnectorType;
    query: string;
    platform?: string;
    title: string;
    description?: string;
}
export declare function getErrorMessageWithLink({ version, platform, title, description, engineVersion, database, query, }: ErrorWithLinkInput): string;
