"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRandomString = exports.getGithubIssueUrl = exports.link = exports.fixBinaryTargets = exports.plusX = void 0;
const fs_1 = __importDefault(require("fs"));
const terminal_link_1 = __importDefault(require("terminal-link"));
const new_github_issue_url_1 = __importDefault(require("new-github-issue-url"));
const chalk_1 = __importDefault(require("chalk"));
const debug_1 = __importDefault(require("@prisma/debug"));
const crypto_1 = __importDefault(require("crypto"));
const debug = debug_1.default('plusX');
function plusX(file) {
    const s = fs_1.default.statSync(file);
    const newMode = s.mode | 64 | 8 | 1;
    if (s.mode === newMode) {
        debug(`Execution permissions of ${file} are fine`);
        return;
    }
    const base8 = newMode.toString(8).slice(-3);
    debug(`Have to call plusX on ${file}`);
    fs_1.default.chmodSync(file, base8);
}
exports.plusX = plusX;
function fixBinaryTargets(platforms, platform) {
    platforms = platforms || [];
    if (!platforms.includes('native')) {
        return ['native', ...platforms];
    }
    return [...platforms, platform];
}
exports.fixBinaryTargets = fixBinaryTargets;
function link(url) {
    return terminal_link_1.default(url, url, {
        fallback: (url) => chalk_1.default.underline(url),
    });
}
exports.link = link;
function getGithubIssueUrl({ title, user = 'prisma', repo = 'prisma', template = 'bug_report.md', body, }) {
    return new_github_issue_url_1.default({
        user,
        repo,
        template,
        title,
        body,
    });
}
exports.getGithubIssueUrl = getGithubIssueUrl;
function getRandomString() {
    return crypto_1.default.randomBytes(12).toString('hex');
}
exports.getRandomString = getRandomString;
//# sourceMappingURL=util.js.map