"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getErrorMessageWithLink = exports.PrismaClientInitializationError = exports.PrismaClientRustError = exports.PrismaClientRustPanicError = exports.PrismaClientUnknownRequestError = exports.PrismaClientKnownRequestError = void 0;
const log_1 = require("./log");
const debug_1 = require("@prisma/debug");
const util_1 = require("./util");
const strip_ansi_1 = __importDefault(require("strip-ansi"));
const maskQuery_1 = require("./maskQuery");
class PrismaClientKnownRequestError extends Error {
    constructor(message, code, clientVersion, meta) {
        super(message);
        this.code = code;
        this.clientVersion = clientVersion;
        this.meta = meta;
    }
    get [Symbol.toStringTag]() {
        return 'PrismaClientKnownRequestError';
    }
}
exports.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
class PrismaClientUnknownRequestError extends Error {
    constructor(message, clientVersion) {
        super(message);
        this.clientVersion = clientVersion;
    }
    get [Symbol.toStringTag]() {
        return 'PrismaClientUnknownRequestError';
    }
}
exports.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;
class PrismaClientRustPanicError extends Error {
    constructor(message, clientVersion) {
        super(message);
        this.clientVersion = clientVersion;
    }
    get [Symbol.toStringTag]() {
        return 'PrismaClientRustPanicError';
    }
}
exports.PrismaClientRustPanicError = PrismaClientRustPanicError;
/**
 * A generic Prisma Client Rust error.
 * This error is being exposed via the `prisma.$on('error')` interface
 */
class PrismaClientRustError extends Error {
    constructor({ clientVersion, log, error }) {
        if (log) {
            const backtrace = log_1.getBacktraceFromLog(log);
            super(backtrace !== null && backtrace !== void 0 ? backtrace : 'Unkown error');
        }
        else if (error) {
            const backtrace = log_1.getBacktraceFromRustError(error);
            super(backtrace);
        }
        else {
            // this should never happen
            super(`Unknown error`);
        }
        this.clientVersion = clientVersion;
    }
    get [Symbol.toStringTag]() {
        return 'PrismaClientRustPanicError';
    }
}
exports.PrismaClientRustError = PrismaClientRustError;
class PrismaClientInitializationError extends Error {
    constructor(message, clientVersion, errorCode) {
        super(message);
        this.clientVersion = clientVersion;
        this.errorCode = errorCode;
        Error.captureStackTrace(PrismaClientInitializationError);
    }
    get [Symbol.toStringTag]() {
        return 'PrismaClientInitializationError';
    }
}
exports.PrismaClientInitializationError = PrismaClientInitializationError;
function getErrorMessageWithLink({ version, platform, title, description, engineVersion, database, query, }) {
    var _a;
    const gotLogs = debug_1.getLogs(6000 - query.length);
    const logs = normalizeLogs(strip_ansi_1.default(gotLogs));
    const moreInfo = description
        ? `# Description\n\`\`\`\n${description}\n\`\`\``
        : '';
    const body = strip_ansi_1.default(`Hi Prisma Team! My Prisma Client just crashed. This is the report:
## Versions

| Name            | Version            |
|-----------------|--------------------|
| Node            | ${(_a = process.version) === null || _a === void 0 ? void 0 : _a.padEnd(19)}| 
| OS              | ${platform === null || platform === void 0 ? void 0 : platform.padEnd(19)}|
| Prisma Client   | ${version === null || version === void 0 ? void 0 : version.padEnd(19)}|
| Query Engine    | ${engineVersion === null || engineVersion === void 0 ? void 0 : engineVersion.padEnd(19)}|
| Database        | ${database === null || database === void 0 ? void 0 : database.padEnd(19)}|

${moreInfo}

## Query
\`\`\`
${query ? maskQuery_1.maskQuery(query) : ''}
\`\`\`

## Logs
\`\`\`
${logs}
\`\`\`

## Client Snippet
\`\`\`ts
// PLEASE FILL YOUR CODE SNIPPET HERE
\`\`\`

## Schema
\`\`\`prisma
// PLEASE ADD YOUR SCHEMA HERE IF POSSIBLE
\`\`\`
`);
    const url = util_1.getGithubIssueUrl({ title, body });
    return `${title}

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.

${util_1.link(url)}

If you want the Prisma team to look into it, please open the link above 🙏
To increase the chance of success, please post your schema and a snippet of
how you used Prisma Client in the issue. 
`;
}
exports.getErrorMessageWithLink = getErrorMessageWithLink;
/**
 * Removes the leading timestamps (from docker) and trailing ms (from debug)
 * @param logs logs to normalize
 */
function normalizeLogs(logs) {
    return logs
        .split('\n')
        .map((l) => {
        return l
            .replace(/^\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)\s*/, '')
            .replace(/\+\d+\s*ms$/, '');
    })
        .join('\n');
}
//# sourceMappingURL=errors.js.map