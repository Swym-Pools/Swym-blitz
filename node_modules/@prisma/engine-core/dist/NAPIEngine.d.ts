import { Platform } from '@prisma/get-platform';
import type { Engine, EngineConfig, EngineEventType, GetConfigResult } from './Engine';
declare type QueryEngineLogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'off';
declare type QueryEngineConfig = {
    datamodel: string;
    datasourceOverrides?: Record<string, string>;
    logLevel: QueryEngineLogLevel;
};
export interface QueryEngineConstructor {
    new (config: QueryEngineConfig, logger: (err: string, log: string) => void): QueryEngine;
}
declare type ConnectArgs = {
    enableRawQueries: boolean;
};
export declare type QueryEngine = {
    connect(connectArgs: ConnectArgs): Promise<void>;
    disconnect(): Promise<void>;
    getConfig(): Promise<string>;
    dmmf(): Promise<string>;
    query(request: any): Promise<string>;
    sdlSchema(): Promise<string>;
    serverInfo(): Promise<string>;
    nextLogEvent(): Promise<string>;
};
export declare class NAPIEngine implements Engine {
    private engine?;
    private setupPromise?;
    private connectPromise?;
    private disconnectPromise?;
    private currentQuery?;
    private config;
    private QueryEngine?;
    private logEmitter;
    libQueryEnginePath?: string;
    platform?: Platform;
    datasourceOverrides: Record<string, string>;
    datamodel: string;
    logQueries: boolean;
    logLevel: QueryEngineLogLevel;
    connected: boolean;
    beforeExitListener?: (args?: any) => any;
    constructor(config: EngineConfig);
    private internalSetup;
    private getPlatform;
    private parseEngineResponse;
    private convertDatasources;
    private loadEngine;
    private parseInitError;
    private parseRequestError;
    on(event: EngineEventType, listener: (args?: any) => any): void;
    emitExit(): Promise<void>;
    start(): Promise<void>;
    stop(): Promise<void>;
    kill(signal: string): void;
    getConfig(): Promise<GetConfigResult>;
    version(forceRun?: boolean): Promise<string>;
    private graphQLToJSError;
    request<T>(query: string, headers: Record<string, string>, numTry: number): Promise<{
        data: T;
        elapsed: number;
    }>;
    requestBatch(queries: string[], transaction?: boolean, numTry?: number): Promise<any>;
    private resolveEnginePath;
    private getLibQueryEnginePath;
    private getFixedGenerator;
}
export {};
