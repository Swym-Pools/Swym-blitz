"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertLog = exports.isRustError = exports.isRustErrorLog = exports.isRustLog = exports.getBacktraceFromRustError = exports.getBacktraceFromLog = exports.getMessage = void 0;
function getMessage(log) {
    if (typeof log === 'string') {
        return log;
    }
    else if (isRustError(log)) {
        return getBacktraceFromRustError(log);
    }
    else if (isRustLog(log)) {
        return getBacktraceFromLog(log);
    }
    return JSON.stringify(log);
}
exports.getMessage = getMessage;
function getBacktraceFromLog(log) {
    var _a, _b, _c, _d, _e, _f, _g;
    if ((_a = log.fields) === null || _a === void 0 ? void 0 : _a.message) {
        let str = (_b = log.fields) === null || _b === void 0 ? void 0 : _b.message;
        if ((_c = log.fields) === null || _c === void 0 ? void 0 : _c.file) {
            str += ` in ${log.fields.file}`;
            if ((_d = log.fields) === null || _d === void 0 ? void 0 : _d.line) {
                str += `:${log.fields.line}`;
            }
            if ((_e = log.fields) === null || _e === void 0 ? void 0 : _e.column) {
                str += `:${log.fields.column}`;
            }
        }
        if ((_f = log.fields) === null || _f === void 0 ? void 0 : _f.reason) {
            str += `\n${(_g = log.fields) === null || _g === void 0 ? void 0 : _g.reason}`;
        }
        return str;
    }
    return 'Unknown error';
}
exports.getBacktraceFromLog = getBacktraceFromLog;
function getBacktraceFromRustError(err) {
    let str = '';
    if (err.is_panic) {
        str += `PANIC`;
    }
    if (err.backtrace) {
        str += ` in ${err.backtrace}`;
    }
    if (err.message) {
        str += `\n${err.message}`;
    }
    return str;
}
exports.getBacktraceFromRustError = getBacktraceFromRustError;
function isRustLog(e) {
    return (e.timestamp && typeof e.level === 'string' && typeof e.target === 'string');
}
exports.isRustLog = isRustLog;
function isRustErrorLog(e) {
    var _a, _b;
    return (isRustLog(e) &&
        (e.level === 'error' || ((_b = (_a = e.fields) === null || _a === void 0 ? void 0 : _a.message) === null || _b === void 0 ? void 0 : _b.includes('fatal error'))));
}
exports.isRustErrorLog = isRustErrorLog;
function isRustError(e) {
    return typeof e.is_panic !== 'undefined';
}
exports.isRustError = isRustError;
function convertLog(rustLog) {
    const isQuery = isQueryLog(rustLog.fields);
    const level = isQuery
        ? 'query'
        : rustLog.level.toLowerCase();
    return {
        ...rustLog,
        level,
        timestamp: new Date(new Date().getFullYear() + ' ' + rustLog.timestamp),
    };
}
exports.convertLog = convertLog;
function isQueryLog(fields) {
    return Boolean(fields.query);
}
//# sourceMappingURL=log.js.map