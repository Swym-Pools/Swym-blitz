"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEnvPaths = void 0;
const debug_1 = __importDefault(require("@prisma/debug"));
const find_up_1 = __importDefault(require("find-up"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const getSchema_1 = require("../cli/getSchema");
const tryLoadEnvs_1 = require("./tryLoadEnvs");
const debug = debug_1.default('prisma:loadEnv');
/**
 *  1. Search in project root
 *  1. Schema
 *    1. Search location from schema arg `--schema`
 *    1. Search location from pkgJSON `"prisma": {"schema": "/path/to/schema.prisma"}`
 *    1. Search default location `./prisma/.env`
 *    1. Search cwd `./.env`
 *
 * @returns `{ rootEnvPath, schemaEnvPath }`
 */
function getEnvPaths(schemaPath, opts = { cwd: process.cwd() }) {
    var _a;
    const rootEnvPath = (_a = getProjectRootEnvPath({ cwd: opts.cwd })) !== null && _a !== void 0 ? _a : null;
    const schemaEnvPathFromArgs = schemaPathToEnvPath(schemaPath);
    const schemaEnvPathFromPkgJson = schemaPathToEnvPath(readSchemaPathFromPkgJson());
    const schemaEnvPaths = [
        schemaEnvPathFromArgs,
        schemaEnvPathFromPkgJson,
        './prisma/.env',
        './.env', // 4 - Check cwd for .env
    ];
    const schemaEnvPath = schemaEnvPaths.find(tryLoadEnvs_1.exists);
    return { rootEnvPath, schemaEnvPath };
}
exports.getEnvPaths = getEnvPaths;
function readSchemaPathFromPkgJson() {
    try {
        return getSchema_1.getSchemaPathFromPackageJsonSync(process.cwd());
    }
    catch (_a) {
        return null;
    }
}
function getProjectRootEnvPath(opts) {
    const pkgJsonPath = find_up_1.default.sync((dir) => {
        const pkgPath = path_1.default.join(dir, 'package.json');
        if (find_up_1.default.exists(pkgPath)) {
            try {
                const pkg = JSON.parse(fs_1.default.readFileSync(pkgPath, 'utf8'));
                if (pkg['name'] !== '.prisma/client') {
                    debug(`project root found at ${pkgPath}`);
                    return pkgPath;
                }
            }
            catch (e) {
                debug(`skipping package.json at ${pkgPath}`);
            }
        }
    }, opts);
    if (!pkgJsonPath) {
        return null;
    }
    const candidate = path_1.default.join(path_1.default.dirname(pkgJsonPath), '.env');
    if (!fs_1.default.existsSync(candidate)) {
        return null;
    }
    return candidate;
}
function schemaPathToEnvPath(schemaPath) {
    if (!schemaPath)
        return null;
    return path_1.default.join(path_1.default.dirname(schemaPath), '.env');
}
//# sourceMappingURL=getEnvPaths.js.map