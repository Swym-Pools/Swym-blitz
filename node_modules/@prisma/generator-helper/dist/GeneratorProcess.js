"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeneratorProcess = exports.GeneratorError = void 0;
const child_process_1 = require("child_process");
const cross_spawn_1 = require("cross-spawn");
const byline_1 = __importDefault(require("./byline"));
const chalk_1 = __importDefault(require("chalk"));
const debug_1 = __importDefault(require("@prisma/debug"));
const debug = debug_1.default('prisma:GeneratorProcess');
let globalMessageId = 1;
class GeneratorError extends Error {
    constructor(message, code, data) {
        super(message);
        this.code = code;
        this.data = data;
    }
}
exports.GeneratorError = GeneratorError;
class GeneratorProcess {
    constructor(executablePath, isNode) {
        this.executablePath = executablePath;
        this.isNode = isNode;
        this.listeners = {};
        this.exitCode = null;
        this.stderrLogs = '';
    }
    async init() {
        if (!this.initPromise) {
            this.initPromise = this.initSingleton();
        }
        return this.initPromise;
    }
    initSingleton() {
        return new Promise((resolve, reject) => {
            try {
                if (this.isNode) {
                    this.child = child_process_1.fork(this.executablePath, [], {
                        stdio: ['pipe', 'inherit', 'pipe', 'ipc'],
                        env: {
                            ...process.env,
                            PRISMA_GENERATOR_INVOCATION: 'true',
                        },
                        execArgv: ['--max-old-space-size=8096'],
                    });
                }
                else {
                    this.child = cross_spawn_1.spawn(this.executablePath, {
                        stdio: ['pipe', 'inherit', 'pipe'],
                        env: {
                            ...process.env,
                            PRISMA_GENERATOR_INVOCATION: 'true',
                        },
                        shell: true,
                    });
                }
                this.child.on('exit', (code) => {
                    this.exitCode = code;
                    if (code && code > 0 && this.currentGenerateDeferred) {
                        // print last 5 lines of stderr
                        this.currentGenerateDeferred.reject(new Error(this.stderrLogs.split('\n').slice(-5).join('\n')));
                    }
                });
                this.child.on('error', (err) => {
                    this.lastError = err;
                    if (err.message.includes('EACCES')) {
                        reject(new Error(`The executable at ${this.executablePath} lacks the right chmod. Please use ${chalk_1.default.bold(`chmod +x ${this.executablePath}`)}`));
                    }
                    else {
                        reject(err);
                    }
                });
                byline_1.default(this.child.stderr).on('data', (line) => {
                    const response = String(line);
                    this.stderrLogs += response + '\n';
                    let data;
                    try {
                        data = JSON.parse(response);
                    }
                    catch (e) {
                        debug(response);
                    }
                    if (data) {
                        this.handleResponse(data);
                    }
                });
                // wait 200ms for the binary to fail
                setTimeout(() => {
                    if (this.exitCode && this.exitCode > 0) {
                        reject(new Error(`Generator at ${this.executablePath} could not start:\n\n${this.stderrLogs}`));
                    }
                    else {
                        resolve();
                    }
                }, 200);
            }
            catch (e) {
                reject(e);
            }
        });
    }
    handleResponse(data) {
        if (data.jsonrpc && data.id) {
            if (typeof data.id !== 'number') {
                throw new Error(`message.id has to be a number. Found value ${data.id}`);
            }
            if (this.listeners[data.id]) {
                if (data.error) {
                    const error = new GeneratorError(data.error.message, data.error.code, data.error.data);
                    this.listeners[data.id](null, error);
                }
                else {
                    this.listeners[data.id](data.result);
                }
                delete this.listeners[data.id];
            }
        }
    }
    registerListener(messageId, cb) {
        this.listeners[messageId] = cb;
    }
    sendMessage(message) {
        this.child.stdin.write(JSON.stringify(message) + '\n');
    }
    getMessageId() {
        return globalMessageId++;
    }
    stop() {
        if (!this.child.killed) {
            this.child.kill();
        }
    }
    getManifest(config) {
        return new Promise((resolve, reject) => {
            const messageId = this.getMessageId();
            this.registerListener(messageId, (result, error) => {
                if (error) {
                    return reject(error);
                }
                if (result.manifest) {
                    resolve(result.manifest);
                }
                else {
                    resolve(null);
                }
            });
            this.sendMessage({
                jsonrpc: '2.0',
                method: 'getManifest',
                params: config,
                id: messageId,
            });
        });
    }
    generate(options) {
        return new Promise((resolve, reject) => {
            const messageId = this.getMessageId();
            this.currentGenerateDeferred = { resolve, reject };
            this.registerListener(messageId, (result, error) => {
                if (error) {
                    reject(error);
                    this.currentGenerateDeferred = undefined;
                    return;
                }
                resolve(result);
                this.currentGenerateDeferred = undefined;
            });
            this.sendMessage({
                jsonrpc: '2.0',
                method: 'generate',
                params: options,
                id: messageId,
            });
        });
    }
}
exports.GeneratorProcess = GeneratorProcess;
//# sourceMappingURL=GeneratorProcess.js.map