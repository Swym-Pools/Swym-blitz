import { Lexer, createToken, CstParser } from 'chevrotain';
import { EOL } from 'os';

var Identifier = /*#__PURE__*/createToken({
  name: 'Identifier',
  pattern: /[a-zA-Z]\w*/
});
var Datasource = /*#__PURE__*/createToken({
  name: 'Datasource',
  pattern: /datasource/,
  longer_alt: Identifier
});
var Generator = /*#__PURE__*/createToken({
  name: 'Generator',
  pattern: /generator/,
  longer_alt: Identifier
});
var Model = /*#__PURE__*/createToken({
  name: 'Model',
  pattern: /model/,
  longer_alt: Identifier
});
var Enum = /*#__PURE__*/createToken({
  name: 'Enum',
  pattern: /enum/,
  longer_alt: Identifier
});
var True = /*#__PURE__*/createToken({
  name: 'True',
  pattern: /true/,
  longer_alt: Identifier
});
var False = /*#__PURE__*/createToken({
  name: 'False',
  pattern: /false/,
  longer_alt: Identifier
});
var Null = /*#__PURE__*/createToken({
  name: 'Null',
  pattern: /null/,
  longer_alt: Identifier
});
var Comment = /*#__PURE__*/createToken({
  name: 'Comment',
  pattern: Lexer.NA
});
var DocComment = /*#__PURE__*/createToken({
  name: 'DocComment',
  pattern: /\/\/\/\s*(.+)/,
  categories: [Comment]
});
var LineComment = /*#__PURE__*/createToken({
  name: 'LineComment',
  pattern: /\/\/\s*(.+)/,
  categories: [Comment]
});
var Attribute = /*#__PURE__*/createToken({
  name: 'Attribute',
  pattern: Lexer.NA
});
var ModelAttribute = /*#__PURE__*/createToken({
  name: 'ModelAttribute',
  pattern: /@@/,
  label: "'@@'",
  categories: [Attribute]
});
var FieldAttribute = /*#__PURE__*/createToken({
  name: 'FieldAttribute',
  pattern: /@/,
  label: "'@'",
  categories: [Attribute]
});
var Dot = /*#__PURE__*/createToken({
  name: 'Dot',
  pattern: /\./,
  label: "'.'"
});
var QuestionMark = /*#__PURE__*/createToken({
  name: 'QuestionMark',
  pattern: /\?/,
  label: "'?'"
});
var Array = /*#__PURE__*/createToken({
  name: 'Array',
  pattern: /\[\]/,
  label: "'[]'"
});
var LCurly = /*#__PURE__*/createToken({
  name: 'LCurly',
  pattern: /{/,
  label: "'{'"
});
var RCurly = /*#__PURE__*/createToken({
  name: 'RCurly',
  pattern: /}/,
  label: "'}'"
});
var LRound = /*#__PURE__*/createToken({
  name: 'LRound',
  pattern: /\(/,
  label: "'('"
});
var RRound = /*#__PURE__*/createToken({
  name: 'RRound',
  pattern: /\)/,
  label: "')'"
});
var LSquare = /*#__PURE__*/createToken({
  name: 'LSquare',
  pattern: /\[/,
  label: "'['"
});
var RSquare = /*#__PURE__*/createToken({
  name: 'RSquare',
  pattern: /\]/,
  label: "']'"
});
var Comma = /*#__PURE__*/createToken({
  name: 'Comma',
  pattern: /,/,
  label: "','"
});
var Colon = /*#__PURE__*/createToken({
  name: 'Colon',
  pattern: /:/,
  label: "':'"
});
var Equals = /*#__PURE__*/createToken({
  name: 'Equals',
  pattern: /=/,
  label: "'='"
});
var StringLiteral = /*#__PURE__*/createToken({
  name: 'StringLiteral',
  pattern: /"(:?[^\\"\n\r]+|\\(:?[bfnrtv"\\/]|u[0-9a-fA-F]{4}))*"/
});
var NumberLiteral = /*#__PURE__*/createToken({
  name: 'NumberLiteral',
  pattern: /-?(0|[1-9]\d*)(\.\d+)?([eE][+-]?\d+)?/
});
var WhiteSpace = /*#__PURE__*/createToken({
  name: 'WhiteSpace',
  pattern: /\s+/,
  group: Lexer.SKIPPED
});
var LineBreak = /*#__PURE__*/createToken({
  name: 'LineBreak',
  pattern: /\n|\r\n/,
  line_breaks: true,
  label: 'LineBreak'
});
var allTokens = [Comment, DocComment, LineComment, LineBreak, WhiteSpace, Attribute, ModelAttribute, FieldAttribute, Dot, QuestionMark, Array, LCurly, RCurly, LSquare, RSquare, LRound, RRound, Comma, Colon, Equals, True, False, Null, Datasource, Generator, Model, Enum, StringLiteral, NumberLiteral, Identifier];
var PrismaLexer = /*#__PURE__*/new Lexer(allTokens);

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

var PrismaParser = /*#__PURE__*/function (_CstParser) {
  _inheritsLoose(PrismaParser, _CstParser);

  function PrismaParser() {
    var _this;

    _this = _CstParser.call(this, allTokens) || this;
    _this["break"] = _this.RULE('break', function () {
      _this.CONSUME1(LineBreak);

      _this.CONSUME2(LineBreak);
    });
    _this.keyedArg = _this.RULE('keyedArg', function () {
      _this.CONSUME(Identifier, {
        LABEL: 'keyName'
      });

      _this.CONSUME(Colon);

      _this.SUBRULE(_this.value);
    });
    _this.array = _this.RULE('array', function () {
      _this.CONSUME(LSquare);

      _this.MANY_SEP({
        SEP: Comma,
        DEF: function DEF() {
          _this.SUBRULE(_this.value);
        }
      });

      _this.CONSUME(RSquare);
    });
    _this.func = _this.RULE('func', function () {
      _this.CONSUME(Identifier, {
        LABEL: 'funcName'
      });

      _this.CONSUME(LRound);

      _this.MANY_SEP({
        SEP: Comma,
        DEF: function DEF() {
          _this.SUBRULE(_this.value);
        }
      });

      _this.CONSUME(RRound);
    });
    _this.value = _this.RULE('value', function () {
      _this.OR([{
        ALT: function ALT() {
          return _this.CONSUME(StringLiteral, {
            LABEL: 'value'
          });
        }
      }, {
        ALT: function ALT() {
          return _this.CONSUME(NumberLiteral, {
            LABEL: 'value'
          });
        }
      }, {
        ALT: function ALT() {
          return _this.SUBRULE(_this.array, {
            LABEL: 'value'
          });
        }
      }, {
        ALT: function ALT() {
          return _this.SUBRULE(_this.func, {
            LABEL: 'value'
          });
        }
      }, {
        ALT: function ALT() {
          return _this.CONSUME(True, {
            LABEL: 'value'
          });
        }
      }, {
        ALT: function ALT() {
          return _this.CONSUME(False, {
            LABEL: 'value'
          });
        }
      }, {
        ALT: function ALT() {
          return _this.CONSUME(Null, {
            LABEL: 'value'
          });
        }
      }, {
        ALT: function ALT() {
          return _this.CONSUME(Identifier, {
            LABEL: 'value'
          });
        }
      }]);
    });
    _this.property = _this.RULE('property', function () {
      _this.CONSUME(Identifier, {
        LABEL: 'propertyName'
      });

      _this.CONSUME(Equals);

      _this.SUBRULE(_this.value, {
        LABEL: 'propertyValue'
      });
    });
    _this.assignment = _this.RULE('assignment', function () {
      _this.CONSUME(Identifier, {
        LABEL: 'assignmentName'
      });

      _this.CONSUME(Equals);

      _this.SUBRULE(_this.value, {
        LABEL: 'assignmentValue'
      });
    });
    _this.field = _this.RULE('field', function () {
      _this.CONSUME(Identifier, {
        LABEL: 'fieldName'
      });

      _this.SUBRULE(_this.value, {
        LABEL: 'fieldType'
      });

      _this.OPTION(function () {
        _this.OR([{
          ALT: function ALT() {
            return _this.CONSUME(Array, {
              LABEL: 'array'
            });
          }
        }, {
          ALT: function ALT() {
            return _this.CONSUME(QuestionMark, {
              LABEL: 'optional'
            });
          }
        }]);
      });

      _this.MANY(function () {
        _this.SUBRULE(_this.attribute, {
          LABEL: 'attributeList'
        });
      });
    });
    _this.block = _this.RULE('block', function (_temp) {
      var _ref = _temp === void 0 ? {} : _temp,
          componentType = _ref.componentType;

      var isEnum = componentType === 'enum';
      var isModel = componentType === 'model';

      _this.CONSUME(LCurly);

      _this.CONSUME1(LineBreak);

      _this.MANY(function () {
        _this.OR([{
          ALT: function ALT() {
            return _this.SUBRULE(_this.comment, {
              LABEL: 'list'
            });
          }
        }, {
          GATE: function GATE() {
            return isModel;
          },
          ALT: function ALT() {
            return _this.SUBRULE(_this.property, {
              LABEL: 'list'
            });
          }
        }, {
          GATE: function GATE() {
            return isModel;
          },
          ALT: function ALT() {
            return _this.SUBRULE(_this.attribute, {
              LABEL: 'list'
            });
          }
        }, {
          GATE: function GATE() {
            return isModel;
          },
          ALT: function ALT() {
            return _this.SUBRULE(_this.field, {
              LABEL: 'list'
            });
          }
        }, {
          GATE: function GATE() {
            return isEnum;
          },
          ALT: function ALT() {
            return _this.SUBRULE(_this["enum"], {
              LABEL: 'list'
            });
          }
        }, {
          GATE: function GATE() {
            return !isModel;
          },
          ALT: function ALT() {
            return _this.SUBRULE(_this.assignment, {
              LABEL: 'list'
            });
          }
        }, {
          ALT: function ALT() {
            return _this.SUBRULE(_this["break"], {
              LABEL: 'list'
            });
          }
        }, {
          ALT: function ALT() {
            return _this.CONSUME2(LineBreak);
          }
        }]);
      });

      _this.CONSUME(RCurly);
    });
    _this["enum"] = _this.RULE('enum', function () {
      _this.CONSUME(Identifier, {
        LABEL: 'enumName'
      });
    });
    _this.attribute = _this.RULE('attribute', function () {
      _this.OR1([{
        ALT: function ALT() {
          return _this.CONSUME(ModelAttribute, {
            LABEL: 'modelAttribute'
          });
        }
      }, {
        ALT: function ALT() {
          return _this.CONSUME(FieldAttribute, {
            LABEL: 'fieldAttribute'
          });
        }
      }]);

      _this.OR2([{
        ALT: function ALT() {
          _this.CONSUME1(Identifier, {
            LABEL: 'groupName'
          });

          _this.CONSUME(Dot);

          _this.CONSUME2(Identifier, {
            LABEL: 'attributeName'
          });
        }
      }, {
        ALT: function ALT() {
          return _this.CONSUME(Identifier, {
            LABEL: 'attributeName'
          });
        }
      }]);

      _this.OPTION(function () {
        _this.CONSUME(LRound);

        _this.MANY_SEP({
          SEP: Comma,
          DEF: function DEF() {
            _this.SUBRULE(_this.attributeArg);
          }
        });

        _this.CONSUME(RRound);
      });
    });
    _this.attributeArg = _this.RULE('attributeArg', function () {
      _this.OR([{
        ALT: function ALT() {
          return _this.SUBRULE(_this.keyedArg, {
            LABEL: 'value'
          });
        }
      }, {
        ALT: function ALT() {
          return _this.SUBRULE(_this.value, {
            LABEL: 'value'
          });
        }
      }]);
    });
    _this.component = _this.RULE('component', function () {
      var type = _this.OR1([{
        ALT: function ALT() {
          return _this.CONSUME(Datasource, {
            LABEL: 'type'
          });
        }
      }, {
        ALT: function ALT() {
          return _this.CONSUME(Generator, {
            LABEL: 'type'
          });
        }
      }, {
        ALT: function ALT() {
          return _this.CONSUME(Model, {
            LABEL: 'type'
          });
        }
      }, {
        ALT: function ALT() {
          return _this.CONSUME(Enum, {
            LABEL: 'type'
          });
        }
      }]);

      _this.OR2([{
        ALT: function ALT() {
          _this.CONSUME1(Identifier, {
            LABEL: 'groupName'
          });

          _this.CONSUME(Dot);

          _this.CONSUME2(Identifier, {
            LABEL: 'componentName'
          });
        }
      }, {
        ALT: function ALT() {
          return _this.CONSUME(Identifier, {
            LABEL: 'componentName'
          });
        }
      }]);

      _this.SUBRULE(_this.block, {
        ARGS: [{
          componentType: type.image
        }]
      });
    });
    _this.comment = _this.RULE('comment', function () {
      _this.CONSUME(Comment, {
        LABEL: 'text'
      });
    });
    _this.schema = _this.RULE('schema', function () {
      _this.MANY(function () {
        _this.OR([{
          ALT: function ALT() {
            return _this.SUBRULE(_this.comment, {
              LABEL: 'list'
            });
          }
        }, {
          ALT: function ALT() {
            return _this.SUBRULE(_this.component, {
              LABEL: 'list'
            });
          }
        }, {
          ALT: function ALT() {
            return _this.SUBRULE(_this["break"], {
              LABEL: 'list'
            });
          }
        }, {
          ALT: function ALT() {
            return _this.CONSUME(LineBreak);
          }
        }]);
      });
    });

    _this.performSelfAnalysis();

    return _this;
  }

  return PrismaParser;
}(CstParser);
var parser = /*#__PURE__*/new PrismaParser();

var BasePrismaVisitor = /*#__PURE__*/parser.getBaseCstVisitorConstructorWithDefaults();
var PrismaVisitor = /*#__PURE__*/function (_BasePrismaVisitor) {
  _inheritsLoose(PrismaVisitor, _BasePrismaVisitor);

  function PrismaVisitor() {
    var _this;

    _this = _BasePrismaVisitor.call(this) || this;

    _this.validateVisitor();

    return _this;
  }

  var _proto = PrismaVisitor.prototype;

  _proto.schema = function schema(ctx) {
    var _ctx$list,
        _this2 = this;

    var list = (_ctx$list = ctx.list) == null ? void 0 : _ctx$list.map(function (item) {
      return _this2.visit([item]);
    });
    return {
      type: 'schema',
      list: list
    };
  };

  _proto.component = function component(ctx) {
    var _ctx$type = ctx.type,
        type = _ctx$type[0].image;
    var _ctx$componentName = ctx.componentName,
        name = _ctx$componentName[0].image;
    var list = this.visit(ctx.block);

    switch (type) {
      case 'datasource':
        return {
          type: 'datasource',
          name: name,
          assignments: list
        };

      case 'generator':
        return {
          type: 'generator',
          name: name,
          assignments: list
        };

      case 'model':
        return {
          type: 'model',
          name: name,
          properties: list
        };

      case 'enum':
        return {
          type: 'enum',
          name: name,
          enumerators: list
        };

      default:
        throw new Error("Unexpected block type: " + type);
    }
  };

  _proto["break"] = function _break() {
    return {
      type: 'break'
    };
  };

  _proto.comment = function comment(ctx) {
    var _ctx$text = ctx.text,
        comment = _ctx$text[0].image;
    return {
      type: 'comment',
      text: comment
    };
  };

  _proto.block = function block(ctx) {
    var _ctx$list2,
        _this3 = this;

    return (_ctx$list2 = ctx.list) == null ? void 0 : _ctx$list2.map(function (item) {
      return _this3.visit([item]);
    });
  };

  _proto.assignment = function assignment(ctx) {
    var value = this.visit(ctx.assignmentValue);
    var _ctx$assignmentName = ctx.assignmentName,
        key = _ctx$assignmentName[0].image;
    return {
      type: 'assignment',
      key: key,
      value: value
    };
  };

  _proto.field = function field(ctx) {
    var _this4 = this;

    var fieldType = this.visit(ctx.fieldType);
    var _ctx$fieldName = ctx.fieldName,
        name = _ctx$fieldName[0].image;
    var attributes = ctx.attributeList && ctx.attributeList.map(function (item) {
      return _this4.visit([item]);
    });
    return {
      type: 'field',
      name: name,
      fieldType: fieldType,
      array: ctx.array != null,
      optional: ctx.optional != null,
      attributes: attributes
    };
  };

  _proto.attribute = function attribute(ctx) {
    var _this5 = this;

    var _ctx$attributeName = ctx.attributeName,
        name = _ctx$attributeName[0].image;

    var _ref = ctx.groupName || [{}],
        group = _ref[0].image;

    var args = ctx.attributeArg && ctx.attributeArg.map(function (attr) {
      return _this5.visit(attr);
    });
    var kind = ctx.modelAttribute != null ? 'model' : 'field';
    return {
      type: 'attribute',
      name: name,
      kind: kind,
      group: group,
      args: args
    };
  };

  _proto.attributeArg = function attributeArg(ctx) {
    var value = this.visit(ctx.value);
    return {
      type: 'attributeArgument',
      value: value
    };
  };

  _proto.func = function func(ctx) {
    var _this6 = this;

    var _ctx$funcName = ctx.funcName,
        name = _ctx$funcName[0].image;
    var params = ctx.value && ctx.value.map(function (item) {
      return _this6.visit([item]);
    });
    return {
      type: 'function',
      name: name,
      params: params
    };
  };

  _proto.array = function array(ctx) {
    var _this7 = this;

    var args = ctx.value && ctx.value.map(function (item) {
      return _this7.visit([item]);
    });
    return {
      type: 'array',
      args: args
    };
  };

  _proto.keyedArg = function keyedArg(ctx) {
    var _ctx$keyName = ctx.keyName,
        key = _ctx$keyName[0].image;
    var value = this.visit(ctx.value);
    return {
      type: 'keyValue',
      key: key,
      value: value
    };
  };

  _proto.value = function value(ctx) {
    if (isToken(ctx.value)) {
      var _ctx$value = ctx.value,
          image = _ctx$value[0].image;
      return image;
    }

    return this.visit(ctx.value);
  };

  _proto["enum"] = function _enum(ctx) {
    var _ctx$enumName = ctx.enumName,
        name = _ctx$enumName[0].image;
    return {
      type: 'enumerator',
      name: name
    };
  };

  return PrismaVisitor;
}(BasePrismaVisitor);

function isToken(node) {
  return 'image' in node[0];
}

function getSchema(source) {
  var lexingResult = PrismaLexer.tokenize(source);
  parser.input = lexingResult.tokens;
  var cstNode = parser.schema();
  if (parser.errors.length > 0) throw parser.errors[0];
  var visitor = new PrismaVisitor();
  return visitor.visit(cstNode);
}

function printSchema(schema) {
  return schema.list.map(printBlock).filter(Boolean).join(EOL).replace(/(\r?\n\s*){3,}/g, EOL + EOL) + EOL;
}

function printBlock(block) {
  switch (block.type) {
    case 'comment':
      return printComment(block);

    case 'datasource':
      return printDatasource(block);

    case 'enum':
      return printEnum(block);

    case 'generator':
      return printGenerator(block);

    case 'model':
      return printModel(block);

    case 'break':
      return printBreak();

    default:
      throw new Error("Unrecognized block type");
  }
}

function printComment(comment) {
  return comment.text;
}

function printBreak() {
  return EOL;
}

function printDatasource(db) {
  var children = computeAssignmentFormatting(db.assignments);
  return "\ndatasource " + db.name + " {\n  " + children + "\n}";
}

function printEnum(enumerator) {
  var children = enumerator.enumerators.map(printEnumerator).filter(Boolean).join(EOL + "  ").replace(/(\r?\n\s*){3,}/g, EOL + EOL + "  ");
  return "\nenum " + enumerator.name + " {\n  " + children + "\n}";
}

function printEnumerator(enumerator) {
  switch (enumerator.type) {
    case 'enumerator':
      return enumerator.name;

    case 'comment':
      return printComment(enumerator);

    case 'break':
      return printBreak();

    default:
      throw new Error("Unexpected enumerator type");
  }
}

function printGenerator(generator) {
  var children = computeAssignmentFormatting(generator.assignments);
  return "\ngenerator " + generator.name + " {\n  " + children + "\n}";
}

function printModel(model) {
  var children = computePropertyFormatting(model.properties);
  return "\nmodel " + model.name + " {\n  " + children + "\n}";
}

function printAssignment(node, keyLength) {
  if (keyLength === void 0) {
    keyLength = 0;
  }

  switch (node.type) {
    case 'comment':
      return printComment(node);

    case 'break':
      return printBreak();

    case 'assignment':
      return node.key.padEnd(keyLength) + " = " + printValue(node.value);

    default:
      throw new Error("Unexpected assignment type");
  }
}

function printProperty(node, nameLength, typeLength) {
  if (nameLength === void 0) {
    nameLength = 0;
  }

  if (typeLength === void 0) {
    typeLength = 0;
  }

  switch (node.type) {
    case 'attribute':
      return printAttribute(node);

    case 'field':
      return printField(node, nameLength, typeLength);

    case 'comment':
      return printComment(node);

    case 'break':
      return printBreak();

    default:
      throw new Error("Unrecognized property type");
  }
}

function printAttribute(attribute) {
  var args = attribute.args && attribute.args.length > 0 ? "(" + attribute.args.map(printAttributeArg).filter(Boolean).join(', ') + ")" : '';
  return "" + (attribute.kind === 'field' ? '@' : '@@') + attribute.name + args;
}

function printAttributeArg(arg) {
  return printValue(arg.value);
}

function printField(field, nameLength, typeLength) {
  if (nameLength === void 0) {
    nameLength = 0;
  }

  if (typeLength === void 0) {
    typeLength = 0;
  }

  var name = field.name.padEnd(nameLength);
  var fieldType = printFieldType(field).padEnd(typeLength);
  var attrs = field.attributes ? field.attributes.map(printAttribute) : [];
  return [name, fieldType].concat(attrs).filter(Boolean).join(' ').trim();
}

function printFieldType(field) {
  var suffix = field.array ? '[]' : field.optional ? '?' : '';

  if (typeof field.fieldType === 'object') {
    switch (field.fieldType.type) {
      case 'function':
        {
          var params = field.fieldType.params.map(printValue);
          return field.fieldType.name + "(" + params + ")" + suffix;
        }

      default:
        throw new Error("Unexpected field type");
    }
  }

  return "" + field.fieldType + suffix;
}

function printValue(value) {
  switch (typeof value) {
    case 'object':
      {
        if ('type' in value) {
          switch (value.type) {
            case 'keyValue':
              return value.key + ": " + printValue(value.value);

            case 'function':
              return value.name + "(" + (value.params ? value.params.map(printValue) : '') + ")";

            case 'array':
              return "[" + value.args.join(', ') + "]";

            default:
              throw new Error("Unexpected value type");
          }
        }

        throw new Error("Unexpected object value");
      }

    default:
      return String(value);
  }
}

function computeAssignmentFormatting(list) {
  var pos = 0;
  var listBlocks = list.reduce(function (memo, current, index, arr) {
    if (current.type === 'break') return memo;
    if (index > 0 && arr[index - 1].type === 'break') memo[++pos] = [];
    memo[pos].push(current);
    return memo;
  }, [[]]);
  var keyLengths = listBlocks.map(function (lists) {
    return lists.reduce(function (max, current) {
      return Math.max(max, current.type === 'assignment' ? current.key.length : 0);
    }, 0);
  });
  return list.map(function (item, index, arr) {
    if (index > 0 && item.type !== 'break' && arr[index - 1].type === 'break') keyLengths.shift();
    return printAssignment(item, keyLengths[0]);
  }).filter(Boolean).join(EOL + "  ").replace(/(\r?\n\s*){3,}/g, EOL + EOL + "  ");
}

function computePropertyFormatting(list) {
  var pos = 0;
  var listBlocks = list.reduce(function (memo, current, index, arr) {
    if (current.type === 'break') return memo;
    if (index > 0 && arr[index - 1].type === 'break') memo[++pos] = [];
    memo[pos].push(current);
    return memo;
  }, [[]]);
  var nameLengths = listBlocks.map(function (lists) {
    return lists.reduce(function (max, current) {
      return Math.max(max, current.type === 'field' ? current.name.length : 0);
    }, 0);
  });
  var typeLengths = listBlocks.map(function (lists) {
    return lists.reduce(function (max, current) {
      return Math.max(max, current.type === 'field' ? printFieldType(current).length : 0);
    }, 0);
  });
  return list.map(function (prop, index, arr) {
    if (index > 0 && prop.type !== 'break' && arr[index - 1].type === 'break') {
      nameLengths.shift();
      typeLengths.shift();
    }

    return printProperty(prop, nameLengths[0], typeLengths[0]);
  }).filter(Boolean).join(EOL + "  ").replace(/(\r?\n\s*){3,}/g, EOL + EOL + "  ");
}

export { getSchema, printSchema };
//# sourceMappingURL=prisma-ast.esm.js.map
