{"version":3,"file":"prisma-ast.esm.js","sources":["../src/lexer.ts","../src/parser.ts","../src/visitor.ts","../src/getSchema.ts","../src/printSchema.ts"],"sourcesContent":["import { createToken, Lexer } from 'chevrotain';\n\nexport const Identifier = createToken({\n  name: 'Identifier',\n  pattern: /[a-zA-Z]\\w*/,\n});\nexport const Datasource = createToken({\n  name: 'Datasource',\n  pattern: /datasource/,\n  longer_alt: Identifier,\n});\nexport const Generator = createToken({\n  name: 'Generator',\n  pattern: /generator/,\n  longer_alt: Identifier,\n});\nexport const Model = createToken({\n  name: 'Model',\n  pattern: /model/,\n  longer_alt: Identifier,\n});\nexport const Enum = createToken({\n  name: 'Enum',\n  pattern: /enum/,\n  longer_alt: Identifier,\n});\nexport const True = createToken({\n  name: 'True',\n  pattern: /true/,\n  longer_alt: Identifier,\n});\nexport const False = createToken({\n  name: 'False',\n  pattern: /false/,\n  longer_alt: Identifier,\n});\nexport const Null = createToken({\n  name: 'Null',\n  pattern: /null/,\n  longer_alt: Identifier,\n});\nexport const Comment = createToken({\n  name: 'Comment',\n  pattern: Lexer.NA,\n});\n\nexport const DocComment = createToken({\n  name: 'DocComment',\n  pattern: /\\/\\/\\/\\s*(.+)/,\n  categories: [Comment],\n});\nexport const LineComment = createToken({\n  name: 'LineComment',\n  pattern: /\\/\\/\\s*(.+)/,\n  categories: [Comment],\n});\nexport const Attribute = createToken({\n  name: 'Attribute',\n  pattern: Lexer.NA,\n});\nexport const ModelAttribute = createToken({\n  name: 'ModelAttribute',\n  pattern: /@@/,\n  label: \"'@@'\",\n  categories: [Attribute],\n});\nexport const FieldAttribute = createToken({\n  name: 'FieldAttribute',\n  pattern: /@/,\n  label: \"'@'\",\n  categories: [Attribute],\n});\nexport const Dot = createToken({\n  name: 'Dot',\n  pattern: /\\./,\n  label: \"'.'\",\n});\nexport const QuestionMark = createToken({\n  name: 'QuestionMark',\n  pattern: /\\?/,\n  label: \"'?'\",\n});\nexport const Array = createToken({\n  name: 'Array',\n  pattern: /\\[\\]/,\n  label: \"'[]'\",\n});\nexport const LCurly = createToken({\n  name: 'LCurly',\n  pattern: /{/,\n  label: \"'{'\",\n});\nexport const RCurly = createToken({\n  name: 'RCurly',\n  pattern: /}/,\n  label: \"'}'\",\n});\nexport const LRound = createToken({\n  name: 'LRound',\n  pattern: /\\(/,\n  label: \"'('\",\n});\nexport const RRound = createToken({\n  name: 'RRound',\n  pattern: /\\)/,\n  label: \"')'\",\n});\nexport const LSquare = createToken({\n  name: 'LSquare',\n  pattern: /\\[/,\n  label: \"'['\",\n});\nexport const RSquare = createToken({\n  name: 'RSquare',\n  pattern: /\\]/,\n  label: \"']'\",\n});\nexport const Comma = createToken({\n  name: 'Comma',\n  pattern: /,/,\n  label: \"','\",\n});\nexport const Colon = createToken({\n  name: 'Colon',\n  pattern: /:/,\n  label: \"':'\",\n});\nexport const Equals = createToken({\n  name: 'Equals',\n  pattern: /=/,\n  label: \"'='\",\n});\nexport const StringLiteral = createToken({\n  name: 'StringLiteral',\n  pattern: /\"(:?[^\\\\\"\\n\\r]+|\\\\(:?[bfnrtv\"\\\\/]|u[0-9a-fA-F]{4}))*\"/,\n});\nexport const NumberLiteral = createToken({\n  name: 'NumberLiteral',\n  pattern: /-?(0|[1-9]\\d*)(\\.\\d+)?([eE][+-]?\\d+)?/,\n});\nexport const WhiteSpace = createToken({\n  name: 'WhiteSpace',\n  pattern: /\\s+/,\n  group: Lexer.SKIPPED,\n});\nexport const LineBreak = createToken({\n  name: 'LineBreak',\n  pattern: /\\n|\\r\\n/,\n  line_breaks: true,\n  label: 'LineBreak',\n});\n\nexport const allTokens = [\n  Comment,\n  DocComment,\n  LineComment,\n  LineBreak,\n  WhiteSpace,\n  Attribute,\n  ModelAttribute,\n  FieldAttribute,\n  Dot,\n  QuestionMark,\n  Array,\n  LCurly,\n  RCurly,\n  LSquare,\n  RSquare,\n  LRound,\n  RRound,\n  Comma,\n  Colon,\n  Equals,\n  True,\n  False,\n  Null,\n  Datasource,\n  Generator,\n  Model,\n  Enum,\n  StringLiteral,\n  NumberLiteral,\n  Identifier,\n];\nexport const PrismaLexer = new Lexer(allTokens);\n","import { CstParser } from 'chevrotain';\nimport * as lexer from './lexer';\n\nexport class PrismaParser extends CstParser {\n  constructor() {\n    super(lexer.allTokens);\n    this.performSelfAnalysis();\n  }\n\n  private break = this.RULE('break', () => {\n    this.CONSUME1(lexer.LineBreak);\n    this.CONSUME2(lexer.LineBreak);\n  });\n\n  private keyedArg = this.RULE('keyedArg', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'keyName' });\n    this.CONSUME(lexer.Colon);\n    this.SUBRULE(this.value);\n  });\n\n  private array = this.RULE('array', () => {\n    this.CONSUME(lexer.LSquare);\n    this.MANY_SEP({\n      SEP: lexer.Comma,\n      DEF: () => {\n        this.SUBRULE(this.value);\n      },\n    });\n    this.CONSUME(lexer.RSquare);\n  });\n\n  private func = this.RULE('func', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'funcName' });\n    this.CONSUME(lexer.LRound);\n    this.MANY_SEP({\n      SEP: lexer.Comma,\n      DEF: () => {\n        this.SUBRULE(this.value);\n      },\n    });\n    this.CONSUME(lexer.RRound);\n  });\n\n  private value = this.RULE('value', () => {\n    this.OR([\n      { ALT: () => this.CONSUME(lexer.StringLiteral, { LABEL: 'value' }) },\n      { ALT: () => this.CONSUME(lexer.NumberLiteral, { LABEL: 'value' }) },\n      { ALT: () => this.SUBRULE(this.array, { LABEL: 'value' }) },\n      { ALT: () => this.SUBRULE(this.func, { LABEL: 'value' }) },\n      { ALT: () => this.CONSUME(lexer.True, { LABEL: 'value' }) },\n      { ALT: () => this.CONSUME(lexer.False, { LABEL: 'value' }) },\n      { ALT: () => this.CONSUME(lexer.Null, { LABEL: 'value' }) },\n      { ALT: () => this.CONSUME(lexer.Identifier, { LABEL: 'value' }) },\n    ]);\n  });\n\n  private property = this.RULE('property', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'propertyName' });\n    this.CONSUME(lexer.Equals);\n    this.SUBRULE(this.value, { LABEL: 'propertyValue' });\n  });\n\n  private assignment = this.RULE('assignment', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'assignmentName' });\n    this.CONSUME(lexer.Equals);\n    this.SUBRULE(this.value, { LABEL: 'assignmentValue' });\n  });\n\n  private field = this.RULE('field', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'fieldName' });\n    this.SUBRULE(this.value, { LABEL: 'fieldType' });\n    this.OPTION(() => {\n      this.OR([\n        { ALT: () => this.CONSUME(lexer.Array, { LABEL: 'array' }) },\n        { ALT: () => this.CONSUME(lexer.QuestionMark, { LABEL: 'optional' }) },\n      ]);\n    });\n    this.MANY(() => {\n      this.SUBRULE(this.attribute, { LABEL: 'attributeList' });\n    });\n  });\n\n  private block = this.RULE('block', ({ componentType } = {}) => {\n    const isEnum = componentType === 'enum';\n    const isModel = componentType === 'model';\n\n    this.CONSUME(lexer.LCurly);\n    this.CONSUME1(lexer.LineBreak);\n    this.MANY(() => {\n      this.OR([\n        { ALT: () => this.SUBRULE(this.comment, { LABEL: 'list' }) },\n        {\n          GATE: () => isModel,\n          ALT: () => this.SUBRULE(this.property, { LABEL: 'list' }),\n        },\n        {\n          GATE: () => isModel,\n          ALT: () => this.SUBRULE(this.attribute, { LABEL: 'list' }),\n        },\n        {\n          GATE: () => isModel,\n          ALT: () => this.SUBRULE(this.field, { LABEL: 'list' }),\n        },\n        {\n          GATE: () => isEnum,\n          ALT: () => this.SUBRULE(this.enum, { LABEL: 'list' }),\n        },\n        {\n          GATE: () => !isModel,\n          ALT: () => this.SUBRULE(this.assignment, { LABEL: 'list' }),\n        },\n        { ALT: () => this.SUBRULE(this.break, { LABEL: 'list' }) },\n        { ALT: () => this.CONSUME2(lexer.LineBreak) },\n      ]);\n    });\n    this.CONSUME(lexer.RCurly);\n  });\n\n  private enum = this.RULE('enum', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'enumName' });\n  });\n  private attribute = this.RULE('attribute', () => {\n    this.OR1([\n      {\n        ALT: () =>\n          this.CONSUME(lexer.ModelAttribute, { LABEL: 'modelAttribute' }),\n      },\n      {\n        ALT: () =>\n          this.CONSUME(lexer.FieldAttribute, { LABEL: 'fieldAttribute' }),\n      },\n    ]);\n    this.OR2([\n      {\n        ALT: () => {\n          this.CONSUME1(lexer.Identifier, { LABEL: 'groupName' });\n          this.CONSUME(lexer.Dot);\n          this.CONSUME2(lexer.Identifier, { LABEL: 'attributeName' });\n        },\n      },\n      {\n        ALT: () => this.CONSUME(lexer.Identifier, { LABEL: 'attributeName' }),\n      },\n    ]);\n\n    this.OPTION(() => {\n      this.CONSUME(lexer.LRound);\n      this.MANY_SEP({\n        SEP: lexer.Comma,\n        DEF: () => {\n          this.SUBRULE(this.attributeArg);\n        },\n      });\n      this.CONSUME(lexer.RRound);\n    });\n  });\n\n  private attributeArg = this.RULE('attributeArg', () => {\n    this.OR([\n      { ALT: () => this.SUBRULE(this.keyedArg, { LABEL: 'value' }) },\n      { ALT: () => this.SUBRULE(this.value, { LABEL: 'value' }) },\n    ]);\n  });\n\n  private component = this.RULE('component', () => {\n    const type = this.OR1([\n      { ALT: () => this.CONSUME(lexer.Datasource, { LABEL: 'type' }) },\n      { ALT: () => this.CONSUME(lexer.Generator, { LABEL: 'type' }) },\n      { ALT: () => this.CONSUME(lexer.Model, { LABEL: 'type' }) },\n      { ALT: () => this.CONSUME(lexer.Enum, { LABEL: 'type' }) },\n    ]);\n    this.OR2([\n      {\n        ALT: () => {\n          this.CONSUME1(lexer.Identifier, { LABEL: 'groupName' });\n          this.CONSUME(lexer.Dot);\n          this.CONSUME2(lexer.Identifier, { LABEL: 'componentName' });\n        },\n      },\n      {\n        ALT: () => this.CONSUME(lexer.Identifier, { LABEL: 'componentName' }),\n      },\n    ]);\n\n    this.SUBRULE(this.block, { ARGS: [{ componentType: type.image }] });\n  });\n\n  private comment = this.RULE('comment', () => {\n    this.CONSUME(lexer.Comment, { LABEL: 'text' });\n  });\n\n  public schema = this.RULE('schema', () => {\n    this.MANY(() => {\n      this.OR([\n        { ALT: () => this.SUBRULE(this.comment, { LABEL: 'list' }) },\n        { ALT: () => this.SUBRULE(this.component, { LABEL: 'list' }) },\n        { ALT: () => this.SUBRULE(this.break, { LABEL: 'list' }) },\n        { ALT: () => this.CONSUME(lexer.LineBreak) },\n      ]);\n    });\n  });\n}\n\nexport const parser = new PrismaParser();\n","import { CstNode, IToken } from '@chevrotain/types';\nimport { parser } from './parser';\nimport * as Types from './getSchema';\n\nconst BasePrismaVisitor = parser.getBaseCstVisitorConstructorWithDefaults();\nexport class PrismaVisitor extends BasePrismaVisitor {\n  constructor() {\n    super();\n    this.validateVisitor();\n  }\n\n  schema(ctx: CstNode & { list: CstNode[] }): Types.Schema {\n    const list = ctx.list?.map(item => this.visit([item]));\n    return { type: 'schema', list };\n  }\n\n  component(\n    ctx: CstNode & {\n      type: [IToken];\n      componentName: [IToken];\n      block: [CstNode];\n    }\n  ): Types.Block {\n    const [{ image: type }] = ctx.type;\n    const [{ image: name }] = ctx.componentName;\n    const list = this.visit(ctx.block);\n\n    switch (type) {\n      case 'datasource':\n        return { type: 'datasource', name, assignments: list };\n      case 'generator':\n        return { type: 'generator', name, assignments: list };\n      case 'model':\n        return { type: 'model', name, properties: list };\n      case 'enum':\n        return { type: 'enum', name, enumerators: list };\n      default:\n        throw new Error(`Unexpected block type: ${type}`);\n    }\n  }\n\n  break(): Types.Break {\n    return { type: 'break' };\n  }\n\n  comment(ctx: CstNode & { text: [IToken] }): Types.Comment {\n    const [{ image: comment }] = ctx.text;\n    return { type: 'comment', text: comment };\n  }\n\n  block(ctx: CstNode & { list: CstNode[] }): Types.Block[] {\n    return ctx.list?.map(item => this.visit([item]));\n  }\n\n  assignment(\n    ctx: CstNode & { assignmentName: [IToken]; assignmentValue: [CstNode] }\n  ): Types.Assignment {\n    const value = this.visit(ctx.assignmentValue);\n    const [{ image: key }] = ctx.assignmentName;\n    return { type: 'assignment', key, value };\n  }\n\n  field(\n    ctx: CstNode & {\n      fieldName: [IToken];\n      fieldType: [CstNode];\n      array: [IToken];\n      optional: [IToken];\n      attributeList: CstNode[];\n    }\n  ): Types.Field {\n    const fieldType = this.visit(ctx.fieldType);\n    const [{ image: name }] = ctx.fieldName;\n    const attributes =\n      ctx.attributeList && ctx.attributeList.map(item => this.visit([item]));\n    return {\n      type: 'field',\n      name,\n      fieldType,\n      array: ctx.array != null,\n      optional: ctx.optional != null,\n      attributes,\n    };\n  }\n\n  attribute(\n    ctx: CstNode & {\n      modelAttribute: [IToken];\n      fieldAttribute: [IToken];\n      groupName: [IToken];\n      attributeName: [IToken];\n      attributeArg: CstNode[];\n    }\n  ): Types.Attr {\n    const [{ image: name }] = ctx.attributeName;\n    const [{ image: group }] = ctx.groupName || [{}];\n    const args =\n      ctx.attributeArg && ctx.attributeArg.map(attr => this.visit(attr));\n    const kind = ctx.modelAttribute != null ? 'model' : 'field';\n\n    return { type: 'attribute', name, kind, group, args };\n  }\n\n  attributeArg(ctx: CstNode & { value: [CstNode] }): Types.AttributeArgument {\n    const value = this.visit(ctx.value);\n    return { type: 'attributeArgument', value };\n  }\n\n  func(ctx: CstNode & { funcName: [IToken]; value: CstNode[] }): Types.Func {\n    const [{ image: name }] = ctx.funcName;\n    const params = ctx.value && ctx.value.map(item => this.visit([item]));\n    return { type: 'function', name, params };\n  }\n\n  array(ctx: CstNode & { value: CstNode[] }): Types.RelationArray {\n    const args = ctx.value && ctx.value.map(item => this.visit([item]));\n    return { type: 'array', args };\n  }\n\n  keyedArg(\n    ctx: CstNode & { keyName: [IToken]; value: [CstNode] }\n  ): Types.KeyValue {\n    const [{ image: key }] = ctx.keyName;\n    const value = this.visit(ctx.value);\n    return { type: 'keyValue', key, value };\n  }\n\n  value(ctx: CstNode & { value: [IToken] | [CstNode] }): Types.Value {\n    if (isToken(ctx.value)) {\n      const [{ image }] = ctx.value;\n      return image;\n    }\n    return this.visit(ctx.value);\n  }\n\n  enum(ctx: CstNode & { enumName: [IToken] }): Types.Enumerator {\n    const [{ image: name }] = ctx.enumName;\n    return { type: 'enumerator', name };\n  }\n}\n\nfunction isToken(node: [IToken] | [CstNode]): node is [IToken] {\n  return 'image' in node[0];\n}\n","import { PrismaLexer } from './lexer';\nimport { PrismaVisitor } from './visitor';\nimport { parser } from './parser';\n\nexport function getSchema(source: string): Schema {\n  const lexingResult = PrismaLexer.tokenize(source);\n  parser.input = lexingResult.tokens;\n  const cstNode = parser.schema();\n  if (parser.errors.length > 0) throw parser.errors[0];\n  const visitor = new PrismaVisitor();\n  return visitor.visit(cstNode);\n}\n\nexport interface Schema {\n  type: 'schema';\n  list: Block[];\n}\n\nexport type Block = Model | Datasource | Generator | Enum | Comment | Break;\n\nexport interface Model {\n  type: 'model';\n  name: string;\n  properties: Array<Property | Comment | Break>;\n}\n\nexport interface Datasource {\n  type: 'datasource';\n  name: string;\n  assignments: Array<Assignment | Comment | Break>;\n}\n\nexport interface Generator {\n  type: 'generator';\n  name: string;\n  assignments: Array<Assignment | Comment | Break>;\n}\n\nexport interface Enum {\n  type: 'enum';\n  name: string;\n  enumerators: Array<Enumerator | Comment | Break>;\n}\n\nexport interface Comment {\n  type: 'comment';\n  text: string;\n}\n\nexport interface Break {\n  type: 'break';\n}\n\nexport type Property = GroupedModelAttribute | ModelAttribute | Field;\n\nexport interface Assignment {\n  type: 'assignment';\n  key: string;\n  value: Value;\n}\n\nexport interface Enumerator {\n  type: 'enumerator';\n  name: string;\n  value?: Value;\n}\n\nexport interface ModelAttribute {\n  type: 'attribute';\n  kind: 'model';\n  name: string;\n  args: AttributeArgument[];\n}\n\nexport type GroupedModelAttribute = ModelAttribute & { group: string };\n\nexport interface Field {\n  type: 'field';\n  name: string;\n  fieldType: string | Func;\n  array?: boolean;\n  optional?: boolean;\n  attributes?: Attribute[];\n}\n\nexport type Attr =\n  | Attribute\n  | GroupedAttribute\n  | ModelAttribute\n  | GroupedModelAttribute;\n\nexport interface Attribute {\n  type: 'attribute';\n  kind: 'field';\n  name: string;\n  args?: AttributeArgument[];\n}\n\nexport type GroupedAttribute = Attribute & { group: string };\n\nexport interface AttributeArgument {\n  type: 'attributeArgument';\n  value: KeyValue | Value;\n}\n\nexport interface KeyValue {\n  type: 'keyValue';\n  key: string;\n  value: Value;\n}\n\nexport interface Func {\n  type: 'function';\n  name: string;\n  params: Value[];\n}\n\nexport interface RelationArray {\n  type: 'array';\n  args: string[];\n}\n\nexport type Value =\n  | string\n  | number\n  | boolean\n  | Func\n  | RelationArray\n  | Array<Value>;\n","import * as Types from './getSchema';\nimport { EOL } from 'os';\n\nexport function printSchema(schema: Types.Schema): string {\n  return (\n    schema.list\n      .map(printBlock)\n      .filter(Boolean)\n      .join(EOL)\n      .replace(/(\\r?\\n\\s*){3,}/g, EOL + EOL) + EOL\n  );\n}\n\nfunction printBlock(block: Types.Block): string {\n  switch (block.type) {\n    case 'comment':\n      return printComment(block);\n    case 'datasource':\n      return printDatasource(block);\n    case 'enum':\n      return printEnum(block);\n    case 'generator':\n      return printGenerator(block);\n    case 'model':\n      return printModel(block);\n    case 'break':\n      return printBreak();\n    default:\n      throw new Error(`Unrecognized block type`);\n  }\n}\n\nfunction printComment(comment: Types.Comment) {\n  return comment.text;\n}\n\nfunction printBreak() {\n  return EOL;\n}\n\nfunction printDatasource(db: Types.Datasource) {\n  const children = computeAssignmentFormatting(db.assignments);\n\n  return `\ndatasource ${db.name} {\n  ${children}\n}`;\n}\n\nfunction printEnum(enumerator: Types.Enum) {\n  const children = enumerator.enumerators\n    .map(printEnumerator)\n    .filter(Boolean)\n    .join(`${EOL}  `)\n    .replace(/(\\r?\\n\\s*){3,}/g, `${EOL + EOL}  `);\n\n  return `\nenum ${enumerator.name} {\n  ${children}\n}`;\n}\n\nfunction printEnumerator(\n  enumerator: Types.Enumerator | Types.Comment | Types.Break\n) {\n  switch (enumerator.type) {\n    case 'enumerator':\n      return enumerator.name;\n    case 'comment':\n      return printComment(enumerator);\n    case 'break':\n      return printBreak();\n    default:\n      throw new Error(`Unexpected enumerator type`);\n  }\n}\n\nfunction printGenerator(generator: Types.Generator) {\n  const children = computeAssignmentFormatting(generator.assignments);\n\n  return `\ngenerator ${generator.name} {\n  ${children}\n}`;\n}\n\nfunction printModel(model: Types.Model) {\n  const children = computePropertyFormatting(model.properties);\n\n  return `\nmodel ${model.name} {\n  ${children}\n}`;\n}\n\nfunction printAssignment(\n  node: Types.Assignment | Types.Comment | Types.Break,\n  keyLength = 0\n) {\n  switch (node.type) {\n    case 'comment':\n      return printComment(node);\n    case 'break':\n      return printBreak();\n    case 'assignment':\n      return `${node.key.padEnd(keyLength)} = ${printValue(node.value)}`;\n    default:\n      throw new Error(`Unexpected assignment type`);\n  }\n}\n\nfunction printProperty(\n  node: Types.Property | Types.Comment | Types.Break,\n  nameLength = 0,\n  typeLength = 0\n) {\n  switch (node.type) {\n    case 'attribute':\n      return printAttribute(node);\n    case 'field':\n      return printField(node, nameLength, typeLength);\n    case 'comment':\n      return printComment(node);\n    case 'break':\n      return printBreak();\n    default:\n      throw new Error(`Unrecognized property type`);\n  }\n}\n\nfunction printAttribute(attribute: Types.Attribute | Types.ModelAttribute) {\n  const args =\n    attribute.args && attribute.args.length > 0\n      ? `(${attribute.args\n          .map(printAttributeArg)\n          .filter(Boolean)\n          .join(', ')})`\n      : '';\n\n  return `${attribute.kind === 'field' ? '@' : '@@'}${attribute.name}${args}`;\n}\n\nfunction printAttributeArg(arg: Types.AttributeArgument) {\n  return printValue(arg.value);\n}\n\nfunction printField(field: Types.Field, nameLength = 0, typeLength = 0) {\n  const name = field.name.padEnd(nameLength);\n  const fieldType = printFieldType(field).padEnd(typeLength);\n  const attrs = field.attributes ? field.attributes.map(printAttribute) : [];\n  return [name, fieldType, ...attrs]\n    .filter(Boolean)\n    .join(' ')\n    .trim();\n}\n\nfunction printFieldType(field: Types.Field) {\n  const suffix = field.array ? '[]' : field.optional ? '?' : '';\n\n  if (typeof field.fieldType === 'object') {\n    switch (field.fieldType.type) {\n      case 'function': {\n        const params = field.fieldType.params.map(printValue);\n        return `${field.fieldType.name}(${params})${suffix}`;\n      }\n      default:\n        throw new Error(`Unexpected field type`);\n    }\n  }\n\n  return `${field.fieldType}${suffix}`;\n}\n\nfunction printValue(value: Types.KeyValue | Types.Value): string {\n  switch (typeof value) {\n    case 'object': {\n      if ('type' in value) {\n        switch (value.type) {\n          case 'keyValue':\n            return `${value.key}: ${printValue(value.value)}`;\n          case 'function':\n            return `${value.name}(${\n              value.params ? value.params.map(printValue) : ''\n            })`;\n          case 'array':\n            return `[${value.args.join(', ')}]`;\n          default:\n            throw new Error(`Unexpected value type`);\n        }\n      }\n\n      throw new Error(`Unexpected object value`);\n    }\n    default:\n      return String(value);\n  }\n}\n\nfunction computeAssignmentFormatting(\n  list: Array<Types.Comment | Types.Break | Types.Assignment>\n) {\n  let pos = 0;\n  const listBlocks = list.reduce<Array<typeof list>>(\n    (memo, current, index, arr) => {\n      if (current.type === 'break') return memo;\n      if (index > 0 && arr[index - 1].type === 'break') memo[++pos] = [];\n      memo[pos].push(current);\n      return memo;\n    },\n    [[]]\n  );\n\n  const keyLengths = listBlocks.map(lists =>\n    lists.reduce(\n      (max, current) =>\n        Math.max(\n          max,\n          // perhaps someone more typescript-savy than I am can fix this\n          current.type === 'assignment' ? current.key.length : 0\n        ),\n      0\n    )\n  );\n\n  return list\n    .map((item, index, arr) => {\n      if (index > 0 && item.type !== 'break' && arr[index - 1].type === 'break')\n        keyLengths.shift();\n      return printAssignment(item, keyLengths[0]);\n    })\n    .filter(Boolean)\n    .join(`${EOL}  `)\n    .replace(/(\\r?\\n\\s*){3,}/g, `${EOL + EOL}  `);\n}\n\nfunction computePropertyFormatting(\n  list: Array<Types.Break | Types.Comment | Types.Property>\n) {\n  let pos = 0;\n  const listBlocks = list.reduce<Array<typeof list>>(\n    (memo, current, index, arr) => {\n      if (current.type === 'break') return memo;\n      if (index > 0 && arr[index - 1].type === 'break') memo[++pos] = [];\n      memo[pos].push(current);\n      return memo;\n    },\n    [[]]\n  );\n\n  const nameLengths = listBlocks.map(lists =>\n    lists.reduce(\n      (max, current) =>\n        Math.max(\n          max,\n          // perhaps someone more typescript-savy than I am can fix this\n          current.type === 'field' ? current.name.length : 0\n        ),\n      0\n    )\n  );\n\n  const typeLengths = listBlocks.map(lists =>\n    lists.reduce(\n      (max, current) =>\n        Math.max(\n          max,\n          // perhaps someone more typescript-savy than I am can fix this\n          current.type === 'field' ? printFieldType(current).length : 0\n        ),\n      0\n    )\n  );\n\n  return list\n    .map((prop, index, arr) => {\n      if (\n        index > 0 &&\n        prop.type !== 'break' &&\n        arr[index - 1].type === 'break'\n      ) {\n        nameLengths.shift();\n        typeLengths.shift();\n      }\n\n      return printProperty(prop, nameLengths[0], typeLengths[0]);\n    })\n    .filter(Boolean)\n    .join(`${EOL}  `)\n    .replace(/(\\r?\\n\\s*){3,}/g, `${EOL + EOL}  `);\n}\n"],"names":["Identifier","createToken","name","pattern","Datasource","longer_alt","Generator","Model","Enum","True","False","Null","Comment","Lexer","NA","DocComment","categories","LineComment","Attribute","ModelAttribute","label","FieldAttribute","Dot","QuestionMark","Array","LCurly","RCurly","LRound","RRound","LSquare","RSquare","Comma","Colon","Equals","StringLiteral","NumberLiteral","WhiteSpace","group","SKIPPED","LineBreak","line_breaks","allTokens","PrismaLexer","PrismaParser","lexer","RULE","CONSUME1","CONSUME2","CONSUME","LABEL","SUBRULE","value","MANY_SEP","SEP","DEF","OR","ALT","array","func","OPTION","MANY","attribute","componentType","isEnum","isModel","comment","GATE","property","field","assignment","OR1","OR2","attributeArg","keyedArg","type","block","ARGS","image","component","performSelfAnalysis","CstParser","parser","BasePrismaVisitor","getBaseCstVisitorConstructorWithDefaults","PrismaVisitor","validateVisitor","schema","ctx","list","map","item","visit","componentName","assignments","properties","enumerators","Error","text","assignmentValue","assignmentName","key","fieldType","fieldName","attributes","attributeList","optional","attributeName","groupName","args","attr","kind","modelAttribute","funcName","params","keyName","isToken","enumName","node","getSchema","source","lexingResult","tokenize","input","tokens","cstNode","errors","length","visitor","printSchema","printBlock","filter","Boolean","join","EOL","replace","printComment","printDatasource","printEnum","printGenerator","printModel","printBreak","db","children","computeAssignmentFormatting","enumerator","printEnumerator","generator","model","computePropertyFormatting","printAssignment","keyLength","padEnd","printValue","printProperty","nameLength","typeLength","printAttribute","printField","printAttributeArg","arg","printFieldType","attrs","trim","suffix","String","pos","listBlocks","reduce","memo","current","index","arr","push","keyLengths","lists","max","Math","shift","nameLengths","typeLengths","prop"],"mappings":";;;AAEO,IAAMA,UAAU,gBAAGC,WAAW,CAAC;AACpCC,EAAAA,IAAI,EAAE,YAD8B;AAEpCC,EAAAA,OAAO,EAAE;AAF2B,CAAD,CAA9B;AAIA,IAAMC,UAAU,gBAAGH,WAAW,CAAC;AACpCC,EAAAA,IAAI,EAAE,YAD8B;AAEpCC,EAAAA,OAAO,EAAE,YAF2B;AAGpCE,EAAAA,UAAU,EAAEL;AAHwB,CAAD,CAA9B;AAKA,IAAMM,SAAS,gBAAGL,WAAW,CAAC;AACnCC,EAAAA,IAAI,EAAE,WAD6B;AAEnCC,EAAAA,OAAO,EAAE,WAF0B;AAGnCE,EAAAA,UAAU,EAAEL;AAHuB,CAAD,CAA7B;AAKA,IAAMO,KAAK,gBAAGN,WAAW,CAAC;AAC/BC,EAAAA,IAAI,EAAE,OADyB;AAE/BC,EAAAA,OAAO,EAAE,OAFsB;AAG/BE,EAAAA,UAAU,EAAEL;AAHmB,CAAD,CAAzB;AAKA,IAAMQ,IAAI,gBAAGP,WAAW,CAAC;AAC9BC,EAAAA,IAAI,EAAE,MADwB;AAE9BC,EAAAA,OAAO,EAAE,MAFqB;AAG9BE,EAAAA,UAAU,EAAEL;AAHkB,CAAD,CAAxB;AAKA,IAAMS,IAAI,gBAAGR,WAAW,CAAC;AAC9BC,EAAAA,IAAI,EAAE,MADwB;AAE9BC,EAAAA,OAAO,EAAE,MAFqB;AAG9BE,EAAAA,UAAU,EAAEL;AAHkB,CAAD,CAAxB;AAKA,IAAMU,KAAK,gBAAGT,WAAW,CAAC;AAC/BC,EAAAA,IAAI,EAAE,OADyB;AAE/BC,EAAAA,OAAO,EAAE,OAFsB;AAG/BE,EAAAA,UAAU,EAAEL;AAHmB,CAAD,CAAzB;AAKA,IAAMW,IAAI,gBAAGV,WAAW,CAAC;AAC9BC,EAAAA,IAAI,EAAE,MADwB;AAE9BC,EAAAA,OAAO,EAAE,MAFqB;AAG9BE,EAAAA,UAAU,EAAEL;AAHkB,CAAD,CAAxB;AAKA,IAAMY,OAAO,gBAAGX,WAAW,CAAC;AACjCC,EAAAA,IAAI,EAAE,SAD2B;AAEjCC,EAAAA,OAAO,EAAEU,KAAK,CAACC;AAFkB,CAAD,CAA3B;AAKA,IAAMC,UAAU,gBAAGd,WAAW,CAAC;AACpCC,EAAAA,IAAI,EAAE,YAD8B;AAEpCC,EAAAA,OAAO,EAAE,eAF2B;AAGpCa,EAAAA,UAAU,EAAE,CAACJ,OAAD;AAHwB,CAAD,CAA9B;AAKA,IAAMK,WAAW,gBAAGhB,WAAW,CAAC;AACrCC,EAAAA,IAAI,EAAE,aAD+B;AAErCC,EAAAA,OAAO,EAAE,aAF4B;AAGrCa,EAAAA,UAAU,EAAE,CAACJ,OAAD;AAHyB,CAAD,CAA/B;AAKA,IAAMM,SAAS,gBAAGjB,WAAW,CAAC;AACnCC,EAAAA,IAAI,EAAE,WAD6B;AAEnCC,EAAAA,OAAO,EAAEU,KAAK,CAACC;AAFoB,CAAD,CAA7B;AAIA,IAAMK,cAAc,gBAAGlB,WAAW,CAAC;AACxCC,EAAAA,IAAI,EAAE,gBADkC;AAExCC,EAAAA,OAAO,EAAE,IAF+B;AAGxCiB,EAAAA,KAAK,EAAE,MAHiC;AAIxCJ,EAAAA,UAAU,EAAE,CAACE,SAAD;AAJ4B,CAAD,CAAlC;AAMA,IAAMG,cAAc,gBAAGpB,WAAW,CAAC;AACxCC,EAAAA,IAAI,EAAE,gBADkC;AAExCC,EAAAA,OAAO,EAAE,GAF+B;AAGxCiB,EAAAA,KAAK,EAAE,KAHiC;AAIxCJ,EAAAA,UAAU,EAAE,CAACE,SAAD;AAJ4B,CAAD,CAAlC;AAMA,IAAMI,GAAG,gBAAGrB,WAAW,CAAC;AAC7BC,EAAAA,IAAI,EAAE,KADuB;AAE7BC,EAAAA,OAAO,EAAE,IAFoB;AAG7BiB,EAAAA,KAAK,EAAE;AAHsB,CAAD,CAAvB;AAKA,IAAMG,YAAY,gBAAGtB,WAAW,CAAC;AACtCC,EAAAA,IAAI,EAAE,cADgC;AAEtCC,EAAAA,OAAO,EAAE,IAF6B;AAGtCiB,EAAAA,KAAK,EAAE;AAH+B,CAAD,CAAhC;AAKA,IAAMI,KAAK,gBAAGvB,WAAW,CAAC;AAC/BC,EAAAA,IAAI,EAAE,OADyB;AAE/BC,EAAAA,OAAO,EAAE,MAFsB;AAG/BiB,EAAAA,KAAK,EAAE;AAHwB,CAAD,CAAzB;AAKA,IAAMK,MAAM,gBAAGxB,WAAW,CAAC;AAChCC,EAAAA,IAAI,EAAE,QAD0B;AAEhCC,EAAAA,OAAO,EAAE,GAFuB;AAGhCiB,EAAAA,KAAK,EAAE;AAHyB,CAAD,CAA1B;AAKA,IAAMM,MAAM,gBAAGzB,WAAW,CAAC;AAChCC,EAAAA,IAAI,EAAE,QAD0B;AAEhCC,EAAAA,OAAO,EAAE,GAFuB;AAGhCiB,EAAAA,KAAK,EAAE;AAHyB,CAAD,CAA1B;AAKA,IAAMO,MAAM,gBAAG1B,WAAW,CAAC;AAChCC,EAAAA,IAAI,EAAE,QAD0B;AAEhCC,EAAAA,OAAO,EAAE,IAFuB;AAGhCiB,EAAAA,KAAK,EAAE;AAHyB,CAAD,CAA1B;AAKA,IAAMQ,MAAM,gBAAG3B,WAAW,CAAC;AAChCC,EAAAA,IAAI,EAAE,QAD0B;AAEhCC,EAAAA,OAAO,EAAE,IAFuB;AAGhCiB,EAAAA,KAAK,EAAE;AAHyB,CAAD,CAA1B;AAKA,IAAMS,OAAO,gBAAG5B,WAAW,CAAC;AACjCC,EAAAA,IAAI,EAAE,SAD2B;AAEjCC,EAAAA,OAAO,EAAE,IAFwB;AAGjCiB,EAAAA,KAAK,EAAE;AAH0B,CAAD,CAA3B;AAKA,IAAMU,OAAO,gBAAG7B,WAAW,CAAC;AACjCC,EAAAA,IAAI,EAAE,SAD2B;AAEjCC,EAAAA,OAAO,EAAE,IAFwB;AAGjCiB,EAAAA,KAAK,EAAE;AAH0B,CAAD,CAA3B;AAKA,IAAMW,KAAK,gBAAG9B,WAAW,CAAC;AAC/BC,EAAAA,IAAI,EAAE,OADyB;AAE/BC,EAAAA,OAAO,EAAE,GAFsB;AAG/BiB,EAAAA,KAAK,EAAE;AAHwB,CAAD,CAAzB;AAKA,IAAMY,KAAK,gBAAG/B,WAAW,CAAC;AAC/BC,EAAAA,IAAI,EAAE,OADyB;AAE/BC,EAAAA,OAAO,EAAE,GAFsB;AAG/BiB,EAAAA,KAAK,EAAE;AAHwB,CAAD,CAAzB;AAKA,IAAMa,MAAM,gBAAGhC,WAAW,CAAC;AAChCC,EAAAA,IAAI,EAAE,QAD0B;AAEhCC,EAAAA,OAAO,EAAE,GAFuB;AAGhCiB,EAAAA,KAAK,EAAE;AAHyB,CAAD,CAA1B;AAKA,IAAMc,aAAa,gBAAGjC,WAAW,CAAC;AACvCC,EAAAA,IAAI,EAAE,eADiC;AAEvCC,EAAAA,OAAO,EAAE;AAF8B,CAAD,CAAjC;AAIA,IAAMgC,aAAa,gBAAGlC,WAAW,CAAC;AACvCC,EAAAA,IAAI,EAAE,eADiC;AAEvCC,EAAAA,OAAO,EAAE;AAF8B,CAAD,CAAjC;AAIA,IAAMiC,UAAU,gBAAGnC,WAAW,CAAC;AACpCC,EAAAA,IAAI,EAAE,YAD8B;AAEpCC,EAAAA,OAAO,EAAE,KAF2B;AAGpCkC,EAAAA,KAAK,EAAExB,KAAK,CAACyB;AAHuB,CAAD,CAA9B;AAKA,IAAMC,SAAS,gBAAGtC,WAAW,CAAC;AACnCC,EAAAA,IAAI,EAAE,WAD6B;AAEnCC,EAAAA,OAAO,EAAE,SAF0B;AAGnCqC,EAAAA,WAAW,EAAE,IAHsB;AAInCpB,EAAAA,KAAK,EAAE;AAJ4B,CAAD,CAA7B;AAOA,IAAMqB,SAAS,GAAG,CACvB7B,OADuB,EAEvBG,UAFuB,EAGvBE,WAHuB,EAIvBsB,SAJuB,EAKvBH,UALuB,EAMvBlB,SANuB,EAOvBC,cAPuB,EAQvBE,cARuB,EASvBC,GATuB,EAUvBC,YAVuB,EAWvBC,KAXuB,EAYvBC,MAZuB,EAavBC,MAbuB,EAcvBG,OAduB,EAevBC,OAfuB,EAgBvBH,MAhBuB,EAiBvBC,MAjBuB,EAkBvBG,KAlBuB,EAmBvBC,KAnBuB,EAoBvBC,MApBuB,EAqBvBxB,IArBuB,EAsBvBC,KAtBuB,EAuBvBC,IAvBuB,EAwBvBP,UAxBuB,EAyBvBE,SAzBuB,EA0BvBC,KA1BuB,EA2BvBC,IA3BuB,EA4BvB0B,aA5BuB,EA6BvBC,aA7BuB,EA8BvBnC,UA9BuB,CAAlB;AAgCA,IAAM0C,WAAW,gBAAG,IAAI7B,KAAJ,CAAU4B,SAAV,CAApB;;;;;;;;;;;;;;;;;;ICrLME,YAAb;AAAA;;AACE;;;AACE,kCAAMC,SAAN;AAIM,qBAAQ,MAAKC,IAAL,CAAU,OAAV,EAAmB;AACjC,YAAKC,QAAL,CAAcF,SAAd;;AACA,YAAKG,QAAL,CAAcH,SAAd;AACD,KAHe,CAAR;AAKA,kBAAA,GAAW,MAAKC,IAAL,CAAU,UAAV,EAAsB;AACvC,YAAKG,OAAL,CAAaJ,UAAb,EAA+B;AAAEK,QAAAA,KAAK,EAAE;AAAT,OAA/B;;AACA,YAAKD,OAAL,CAAaJ,KAAb;;AACA,YAAKM,OAAL,CAAa,MAAKC,KAAlB;AACD,KAJkB,CAAX;AAMA,eAAA,GAAQ,MAAKN,IAAL,CAAU,OAAV,EAAmB;AACjC,YAAKG,OAAL,CAAaJ,OAAb;;AACA,YAAKQ,QAAL,CAAc;AACZC,QAAAA,GAAG,EAAET,KADO;AAEZU,QAAAA,GAAG,EAAE;AACH,gBAAKJ,OAAL,CAAa,MAAKC,KAAlB;AACD;AAJW,OAAd;;AAMA,YAAKH,OAAL,CAAaJ,OAAb;AACD,KATe,CAAR;AAWA,cAAA,GAAO,MAAKC,IAAL,CAAU,MAAV,EAAkB;AAC/B,YAAKG,OAAL,CAAaJ,UAAb,EAA+B;AAAEK,QAAAA,KAAK,EAAE;AAAT,OAA/B;;AACA,YAAKD,OAAL,CAAaJ,MAAb;;AACA,YAAKQ,QAAL,CAAc;AACZC,QAAAA,GAAG,EAAET,KADO;AAEZU,QAAAA,GAAG,EAAE;AACH,gBAAKJ,OAAL,CAAa,MAAKC,KAAlB;AACD;AAJW,OAAd;;AAMA,YAAKH,OAAL,CAAaJ,MAAb;AACD,KAVc,CAAP;AAYA,eAAA,GAAQ,MAAKC,IAAL,CAAU,OAAV,EAAmB;AACjC,YAAKU,EAAL,CAAQ,CACN;AAAEC,QAAAA,GAAG,EAAE;AAAA,iBAAM,MAAKR,OAAL,CAAaJ,aAAb,EAAkC;AAAEK,YAAAA,KAAK,EAAE;AAAT,WAAlC,CAAN;AAAA;AAAP,OADM,EAEN;AAAEO,QAAAA,GAAG,EAAE;AAAA,iBAAM,MAAKR,OAAL,CAAaJ,aAAb,EAAkC;AAAEK,YAAAA,KAAK,EAAE;AAAT,WAAlC,CAAN;AAAA;AAAP,OAFM,EAGN;AAAEO,QAAAA,GAAG,EAAE;AAAA,iBAAM,MAAKN,OAAL,CAAa,MAAKO,KAAlB,EAAyB;AAAER,YAAAA,KAAK,EAAE;AAAT,WAAzB,CAAN;AAAA;AAAP,OAHM,EAIN;AAAEO,QAAAA,GAAG,EAAE;AAAA,iBAAM,MAAKN,OAAL,CAAa,MAAKQ,IAAlB,EAAwB;AAAET,YAAAA,KAAK,EAAE;AAAT,WAAxB,CAAN;AAAA;AAAP,OAJM,EAKN;AAAEO,QAAAA,GAAG,EAAE;AAAA,iBAAM,MAAKR,OAAL,CAAaJ,IAAb,EAAyB;AAAEK,YAAAA,KAAK,EAAE;AAAT,WAAzB,CAAN;AAAA;AAAP,OALM,EAMN;AAAEO,QAAAA,GAAG,EAAE;AAAA,iBAAM,MAAKR,OAAL,CAAaJ,KAAb,EAA0B;AAAEK,YAAAA,KAAK,EAAE;AAAT,WAA1B,CAAN;AAAA;AAAP,OANM,EAON;AAAEO,QAAAA,GAAG,EAAE;AAAA,iBAAM,MAAKR,OAAL,CAAaJ,IAAb,EAAyB;AAAEK,YAAAA,KAAK,EAAE;AAAT,WAAzB,CAAN;AAAA;AAAP,OAPM,EAQN;AAAEO,QAAAA,GAAG,EAAE;AAAA,iBAAM,MAAKR,OAAL,CAAaJ,UAAb,EAA+B;AAAEK,YAAAA,KAAK,EAAE;AAAT,WAA/B,CAAN;AAAA;AAAP,OARM,CAAR;AAUD,KAXe,CAAR;AAaA,kBAAA,GAAW,MAAKJ,IAAL,CAAU,UAAV,EAAsB;AACvC,YAAKG,OAAL,CAAaJ,UAAb,EAA+B;AAAEK,QAAAA,KAAK,EAAE;AAAT,OAA/B;;AACA,YAAKD,OAAL,CAAaJ,MAAb;;AACA,YAAKM,OAAL,CAAa,MAAKC,KAAlB,EAAyB;AAAEF,QAAAA,KAAK,EAAE;AAAT,OAAzB;AACD,KAJkB,CAAX;AAMA,oBAAA,GAAa,MAAKJ,IAAL,CAAU,YAAV,EAAwB;AAC3C,YAAKG,OAAL,CAAaJ,UAAb,EAA+B;AAAEK,QAAAA,KAAK,EAAE;AAAT,OAA/B;;AACA,YAAKD,OAAL,CAAaJ,MAAb;;AACA,YAAKM,OAAL,CAAa,MAAKC,KAAlB,EAAyB;AAAEF,QAAAA,KAAK,EAAE;AAAT,OAAzB;AACD,KAJoB,CAAb;AAMA,eAAA,GAAQ,MAAKJ,IAAL,CAAU,OAAV,EAAmB;AACjC,YAAKG,OAAL,CAAaJ,UAAb,EAA+B;AAAEK,QAAAA,KAAK,EAAE;AAAT,OAA/B;;AACA,YAAKC,OAAL,CAAa,MAAKC,KAAlB,EAAyB;AAAEF,QAAAA,KAAK,EAAE;AAAT,OAAzB;;AACA,YAAKU,MAAL,CAAY;AACV,cAAKJ,EAAL,CAAQ,CACN;AAAEC,UAAAA,GAAG,EAAE;AAAA,mBAAM,MAAKR,OAAL,CAAaJ,KAAb,EAA0B;AAAEK,cAAAA,KAAK,EAAE;AAAT,aAA1B,CAAN;AAAA;AAAP,SADM,EAEN;AAAEO,UAAAA,GAAG,EAAE;AAAA,mBAAM,MAAKR,OAAL,CAAaJ,YAAb,EAAiC;AAAEK,cAAAA,KAAK,EAAE;AAAT,aAAjC,CAAN;AAAA;AAAP,SAFM,CAAR;AAID,OALD;;AAMA,YAAKW,IAAL,CAAU;AACR,cAAKV,OAAL,CAAa,MAAKW,SAAlB,EAA6B;AAAEZ,UAAAA,KAAK,EAAE;AAAT,SAA7B;AACD,OAFD;AAGD,KAZe,CAAR;AAcA,eAAA,GAAQ,MAAKJ,IAAL,CAAU,OAAV,EAAmB;oCAAqB;UAAlBiB,qBAAAA;;AACpC,UAAMC,MAAM,GAAGD,aAAa,KAAK,MAAjC;AACA,UAAME,OAAO,GAAGF,aAAa,KAAK,OAAlC;;AAEA,YAAKd,OAAL,CAAaJ,MAAb;;AACA,YAAKE,QAAL,CAAcF,SAAd;;AACA,YAAKgB,IAAL,CAAU;AACR,cAAKL,EAAL,CAAQ,CACN;AAAEC,UAAAA,GAAG,EAAE;AAAA,mBAAM,MAAKN,OAAL,CAAa,MAAKe,OAAlB,EAA2B;AAAEhB,cAAAA,KAAK,EAAE;AAAT,aAA3B,CAAN;AAAA;AAAP,SADM,EAEN;AACEiB,UAAAA,IAAI,EAAE;AAAA,mBAAMF,OAAN;AAAA,WADR;AAEER,UAAAA,GAAG,EAAE;AAAA,mBAAM,MAAKN,OAAL,CAAa,MAAKiB,QAAlB,EAA4B;AAAElB,cAAAA,KAAK,EAAE;AAAT,aAA5B,CAAN;AAAA;AAFP,SAFM,EAMN;AACEiB,UAAAA,IAAI,EAAE;AAAA,mBAAMF,OAAN;AAAA,WADR;AAEER,UAAAA,GAAG,EAAE;AAAA,mBAAM,MAAKN,OAAL,CAAa,MAAKW,SAAlB,EAA6B;AAAEZ,cAAAA,KAAK,EAAE;AAAT,aAA7B,CAAN;AAAA;AAFP,SANM,EAUN;AACEiB,UAAAA,IAAI,EAAE;AAAA,mBAAMF,OAAN;AAAA,WADR;AAEER,UAAAA,GAAG,EAAE;AAAA,mBAAM,MAAKN,OAAL,CAAa,MAAKkB,KAAlB,EAAyB;AAAEnB,cAAAA,KAAK,EAAE;AAAT,aAAzB,CAAN;AAAA;AAFP,SAVM,EAcN;AACEiB,UAAAA,IAAI,EAAE;AAAA,mBAAMH,MAAN;AAAA,WADR;AAEEP,UAAAA,GAAG,EAAE;AAAA,mBAAM,MAAKN,OAAL,CAAa,aAAb,EAAwB;AAAED,cAAAA,KAAK,EAAE;AAAT,aAAxB,CAAN;AAAA;AAFP,SAdM,EAkBN;AACEiB,UAAAA,IAAI,EAAE;AAAA,mBAAM,CAACF,OAAP;AAAA,WADR;AAEER,UAAAA,GAAG,EAAE;AAAA,mBAAM,MAAKN,OAAL,CAAa,MAAKmB,UAAlB,EAA8B;AAAEpB,cAAAA,KAAK,EAAE;AAAT,aAA9B,CAAN;AAAA;AAFP,SAlBM,EAsBN;AAAEO,UAAAA,GAAG,EAAE;AAAA,mBAAM,MAAKN,OAAL,CAAa,cAAb,EAAyB;AAAED,cAAAA,KAAK,EAAE;AAAT,aAAzB,CAAN;AAAA;AAAP,SAtBM,EAuBN;AAAEO,UAAAA,GAAG,EAAE;AAAA,mBAAM,MAAKT,QAAL,CAAcH,SAAd,CAAN;AAAA;AAAP,SAvBM,CAAR;AAyBD,OA1BD;;AA2BA,YAAKI,OAAL,CAAaJ,MAAb;AACD,KAlCe,CAAR;AAoCA,oBAAO,MAAKC,IAAL,CAAU,MAAV,EAAkB;AAC/B,YAAKG,OAAL,CAAaJ,UAAb,EAA+B;AAAEK,QAAAA,KAAK,EAAE;AAAT,OAA/B;AACD,KAFc,CAAP;AAGA,mBAAA,GAAY,MAAKJ,IAAL,CAAU,WAAV,EAAuB;AACzC,YAAKyB,GAAL,CAAS,CACP;AACEd,QAAAA,GAAG,EAAE;AAAA,iBACH,MAAKR,OAAL,CAAaJ,cAAb,EAAmC;AAAEK,YAAAA,KAAK,EAAE;AAAT,WAAnC,CADG;AAAA;AADP,OADO,EAKP;AACEO,QAAAA,GAAG,EAAE;AAAA,iBACH,MAAKR,OAAL,CAAaJ,cAAb,EAAmC;AAAEK,YAAAA,KAAK,EAAE;AAAT,WAAnC,CADG;AAAA;AADP,OALO,CAAT;;AAUA,YAAKsB,GAAL,CAAS,CACP;AACEf,QAAAA,GAAG,EAAE;AACH,gBAAKV,QAAL,CAAcF,UAAd,EAAgC;AAAEK,YAAAA,KAAK,EAAE;AAAT,WAAhC;;AACA,gBAAKD,OAAL,CAAaJ,GAAb;;AACA,gBAAKG,QAAL,CAAcH,UAAd,EAAgC;AAAEK,YAAAA,KAAK,EAAE;AAAT,WAAhC;AACD;AALH,OADO,EAQP;AACEO,QAAAA,GAAG,EAAE;AAAA,iBAAM,MAAKR,OAAL,CAAaJ,UAAb,EAA+B;AAAEK,YAAAA,KAAK,EAAE;AAAT,WAA/B,CAAN;AAAA;AADP,OARO,CAAT;;AAaA,YAAKU,MAAL,CAAY;AACV,cAAKX,OAAL,CAAaJ,MAAb;;AACA,cAAKQ,QAAL,CAAc;AACZC,UAAAA,GAAG,EAAET,KADO;AAEZU,UAAAA,GAAG,EAAE;AACH,kBAAKJ,OAAL,CAAa,MAAKsB,YAAlB;AACD;AAJW,SAAd;;AAMA,cAAKxB,OAAL,CAAaJ,MAAb;AACD,OATD;AAUD,KAlCmB,CAAZ;AAoCA,sBAAA,GAAe,MAAKC,IAAL,CAAU,cAAV,EAA0B;AAC/C,YAAKU,EAAL,CAAQ,CACN;AAAEC,QAAAA,GAAG,EAAE;AAAA,iBAAM,MAAKN,OAAL,CAAa,MAAKuB,QAAlB,EAA4B;AAAExB,YAAAA,KAAK,EAAE;AAAT,WAA5B,CAAN;AAAA;AAAP,OADM,EAEN;AAAEO,QAAAA,GAAG,EAAE;AAAA,iBAAM,MAAKN,OAAL,CAAa,MAAKC,KAAlB,EAAyB;AAAEF,YAAAA,KAAK,EAAE;AAAT,WAAzB,CAAN;AAAA;AAAP,OAFM,CAAR;AAID,KALsB,CAAf;AAOA,mBAAA,GAAY,MAAKJ,IAAL,CAAU,WAAV,EAAuB;AACzC,UAAM6B,IAAI,GAAG,MAAKJ,GAAL,CAAS,CACpB;AAAEd,QAAAA,GAAG,EAAE;AAAA,iBAAM,MAAKR,OAAL,CAAaJ,UAAb,EAA+B;AAAEK,YAAAA,KAAK,EAAE;AAAT,WAA/B,CAAN;AAAA;AAAP,OADoB,EAEpB;AAAEO,QAAAA,GAAG,EAAE;AAAA,iBAAM,MAAKR,OAAL,CAAaJ,SAAb,EAA8B;AAAEK,YAAAA,KAAK,EAAE;AAAT,WAA9B,CAAN;AAAA;AAAP,OAFoB,EAGpB;AAAEO,QAAAA,GAAG,EAAE;AAAA,iBAAM,MAAKR,OAAL,CAAaJ,KAAb,EAA0B;AAAEK,YAAAA,KAAK,EAAE;AAAT,WAA1B,CAAN;AAAA;AAAP,OAHoB,EAIpB;AAAEO,QAAAA,GAAG,EAAE;AAAA,iBAAM,MAAKR,OAAL,CAAaJ,IAAb,EAAyB;AAAEK,YAAAA,KAAK,EAAE;AAAT,WAAzB,CAAN;AAAA;AAAP,OAJoB,CAAT,CAAb;;AAMA,YAAKsB,GAAL,CAAS,CACP;AACEf,QAAAA,GAAG,EAAE;AACH,gBAAKV,QAAL,CAAcF,UAAd,EAAgC;AAAEK,YAAAA,KAAK,EAAE;AAAT,WAAhC;;AACA,gBAAKD,OAAL,CAAaJ,GAAb;;AACA,gBAAKG,QAAL,CAAcH,UAAd,EAAgC;AAAEK,YAAAA,KAAK,EAAE;AAAT,WAAhC;AACD;AALH,OADO,EAQP;AACEO,QAAAA,GAAG,EAAE;AAAA,iBAAM,MAAKR,OAAL,CAAaJ,UAAb,EAA+B;AAAEK,YAAAA,KAAK,EAAE;AAAT,WAA/B,CAAN;AAAA;AADP,OARO,CAAT;;AAaA,YAAKC,OAAL,CAAa,MAAKyB,KAAlB,EAAyB;AAAEC,QAAAA,IAAI,EAAE,CAAC;AAAEd,UAAAA,aAAa,EAAEY,IAAI,CAACG;AAAtB,SAAD;AAAR,OAAzB;AACD,KArBmB,CAAZ;AAuBA,iBAAA,GAAU,MAAKhC,IAAL,CAAU,SAAV,EAAqB;AACrC,YAAKG,OAAL,CAAaJ,OAAb,EAA4B;AAAEK,QAAAA,KAAK,EAAE;AAAT,OAA5B;AACD,KAFiB,CAAV;AAID,gBAAA,GAAS,MAAKJ,IAAL,CAAU,QAAV,EAAoB;AAClC,YAAKe,IAAL,CAAU;AACR,cAAKL,EAAL,CAAQ,CACN;AAAEC,UAAAA,GAAG,EAAE;AAAA,mBAAM,MAAKN,OAAL,CAAa,MAAKe,OAAlB,EAA2B;AAAEhB,cAAAA,KAAK,EAAE;AAAT,aAA3B,CAAN;AAAA;AAAP,SADM,EAEN;AAAEO,UAAAA,GAAG,EAAE;AAAA,mBAAM,MAAKN,OAAL,CAAa,MAAK4B,SAAlB,EAA6B;AAAE7B,cAAAA,KAAK,EAAE;AAAT,aAA7B,CAAN;AAAA;AAAP,SAFM,EAGN;AAAEO,UAAAA,GAAG,EAAE;AAAA,mBAAM,MAAKN,OAAL,CAAa,cAAb,EAAyB;AAAED,cAAAA,KAAK,EAAE;AAAT,aAAzB,CAAN;AAAA;AAAP,SAHM,EAIN;AAAEO,UAAAA,GAAG,EAAE;AAAA,mBAAM,MAAKR,OAAL,CAAaJ,SAAb,CAAN;AAAA;AAAP,SAJM,CAAR;AAMD,OAPD;AAQD,KATe,CAAT;;AAzLL,UAAKmC,mBAAL;;;AACD;;AAJH;AAAA,EAAkCC,SAAlC;AAwMA,AAAO,IAAMC,MAAM,gBAAG,IAAItC,YAAJ,EAAf;;ACvMP,IAAMuC,iBAAiB,gBAAGD,MAAM,CAACE,wCAAP,EAA1B;AACA,IAAaC,aAAb;AAAA;;AACE;;;AACE;;AACA,UAAKC,eAAL;;;AACD;;AAJH;;AAAA,SAMEC,MANF,GAME,gBAAOC,GAAP;;;;AACE,QAAMC,IAAI,gBAAGD,GAAG,CAACC,IAAP,qBAAG,UAAUC,GAAV,CAAc,UAAAC,IAAI;AAAA,aAAI,MAAI,CAACC,KAAL,CAAW,CAACD,IAAD,CAAX,CAAJ;AAAA,KAAlB,CAAb;AACA,WAAO;AAAEhB,MAAAA,IAAI,EAAE,QAAR;AAAkBc,MAAAA,IAAI,EAAJA;AAAlB,KAAP;AACD,GATH;;AAAA,SAWEV,SAXF,GAWE,mBACES,GADF;AAOE,oBAA0BA,GAAG,CAACb,IAA9B;AAAA,QAAgBA,IAAhB,gBAASG,KAAT;AACA,6BAA0BU,GAAG,CAACK,aAA9B;AAAA,QAAgB1F,IAAhB,yBAAS2E,KAAT;AACA,QAAMW,IAAI,GAAG,KAAKG,KAAL,CAAWJ,GAAG,CAACZ,KAAf,CAAb;;AAEA,YAAQD,IAAR;AACE,WAAK,YAAL;AACE,eAAO;AAAEA,UAAAA,IAAI,EAAE,YAAR;AAAsBxE,UAAAA,IAAI,EAAJA,IAAtB;AAA4B2F,UAAAA,WAAW,EAAEL;AAAzC,SAAP;;AACF,WAAK,WAAL;AACE,eAAO;AAAEd,UAAAA,IAAI,EAAE,WAAR;AAAqBxE,UAAAA,IAAI,EAAJA,IAArB;AAA2B2F,UAAAA,WAAW,EAAEL;AAAxC,SAAP;;AACF,WAAK,OAAL;AACE,eAAO;AAAEd,UAAAA,IAAI,EAAE,OAAR;AAAiBxE,UAAAA,IAAI,EAAJA,IAAjB;AAAuB4F,UAAAA,UAAU,EAAEN;AAAnC,SAAP;;AACF,WAAK,MAAL;AACE,eAAO;AAAEd,UAAAA,IAAI,EAAE,MAAR;AAAgBxE,UAAAA,IAAI,EAAJA,IAAhB;AAAsB6F,UAAAA,WAAW,EAAEP;AAAnC,SAAP;;AACF;AACE,cAAM,IAAIQ,KAAJ,6BAAoCtB,IAApC,CAAN;AAVJ;AAYD,GAlCH;;AAAA,oBAoCE;AACE,WAAO;AAAEA,MAAAA,IAAI,EAAE;AAAR,KAAP;AACD,GAtCH;;AAAA,SAwCET,OAxCF,GAwCE,iBAAQsB,GAAR;AACE,oBAA6BA,GAAG,CAACU,IAAjC;AAAA,QAAgBhC,OAAhB,gBAASY,KAAT;AACA,WAAO;AAAEH,MAAAA,IAAI,EAAE,SAAR;AAAmBuB,MAAAA,IAAI,EAAEhC;AAAzB,KAAP;AACD,GA3CH;;AAAA,SA6CEU,KA7CF,GA6CE,eAAMY,GAAN;;;;AACE,yBAAOA,GAAG,CAACC,IAAX,qBAAO,WAAUC,GAAV,CAAc,UAAAC,IAAI;AAAA,aAAI,MAAI,CAACC,KAAL,CAAW,CAACD,IAAD,CAAX,CAAJ;AAAA,KAAlB,CAAP;AACD,GA/CH;;AAAA,SAiDErB,UAjDF,GAiDE,oBACEkB,GADF;AAGE,QAAMpC,KAAK,GAAG,KAAKwC,KAAL,CAAWJ,GAAG,CAACW,eAAf,CAAd;AACA,8BAAyBX,GAAG,CAACY,cAA7B;AAAA,QAAgBC,GAAhB,0BAASvB,KAAT;AACA,WAAO;AAAEH,MAAAA,IAAI,EAAE,YAAR;AAAsB0B,MAAAA,GAAG,EAAHA,GAAtB;AAA2BjD,MAAAA,KAAK,EAALA;AAA3B,KAAP;AACD,GAvDH;;AAAA,SAyDEiB,KAzDF,GAyDE,eACEmB,GADF;;;AASE,QAAMc,SAAS,GAAG,KAAKV,KAAL,CAAWJ,GAAG,CAACc,SAAf,CAAlB;AACA,yBAA0Bd,GAAG,CAACe,SAA9B;AAAA,QAAgBpG,IAAhB,qBAAS2E,KAAT;AACA,QAAM0B,UAAU,GACdhB,GAAG,CAACiB,aAAJ,IAAqBjB,GAAG,CAACiB,aAAJ,CAAkBf,GAAlB,CAAsB,UAAAC,IAAI;AAAA,aAAI,MAAI,CAACC,KAAL,CAAW,CAACD,IAAD,CAAX,CAAJ;AAAA,KAA1B,CADvB;AAEA,WAAO;AACLhB,MAAAA,IAAI,EAAE,OADD;AAELxE,MAAAA,IAAI,EAAJA,IAFK;AAGLmG,MAAAA,SAAS,EAATA,SAHK;AAIL5C,MAAAA,KAAK,EAAE8B,GAAG,CAAC9B,KAAJ,IAAa,IAJf;AAKLgD,MAAAA,QAAQ,EAAElB,GAAG,CAACkB,QAAJ,IAAgB,IALrB;AAMLF,MAAAA,UAAU,EAAVA;AANK,KAAP;AAQD,GA9EH;;AAAA,SAgFE1C,SAhFF,GAgFE,mBACE0B,GADF;;;AASE,6BAA0BA,GAAG,CAACmB,aAA9B;AAAA,QAAgBxG,IAAhB,yBAAS2E,KAAT;;AACA,eAA2BU,GAAG,CAACoB,SAAJ,IAAiB,CAAC,EAAD,CAA5C;AAAA,QAAgBtE,KAAhB,WAASwC,KAAT;;AACA,QAAM+B,IAAI,GACRrB,GAAG,CAACf,YAAJ,IAAoBe,GAAG,CAACf,YAAJ,CAAiBiB,GAAjB,CAAqB,UAAAoB,IAAI;AAAA,aAAI,MAAI,CAAClB,KAAL,CAAWkB,IAAX,CAAJ;AAAA,KAAzB,CADtB;AAEA,QAAMC,IAAI,GAAGvB,GAAG,CAACwB,cAAJ,IAAsB,IAAtB,GAA6B,OAA7B,GAAuC,OAApD;AAEA,WAAO;AAAErC,MAAAA,IAAI,EAAE,WAAR;AAAqBxE,MAAAA,IAAI,EAAJA,IAArB;AAA2B4G,MAAAA,IAAI,EAAJA,IAA3B;AAAiCzE,MAAAA,KAAK,EAALA,KAAjC;AAAwCuE,MAAAA,IAAI,EAAJA;AAAxC,KAAP;AACD,GAhGH;;AAAA,SAkGEpC,YAlGF,GAkGE,sBAAae,GAAb;AACE,QAAMpC,KAAK,GAAG,KAAKwC,KAAL,CAAWJ,GAAG,CAACpC,KAAf,CAAd;AACA,WAAO;AAAEuB,MAAAA,IAAI,EAAE,mBAAR;AAA6BvB,MAAAA,KAAK,EAALA;AAA7B,KAAP;AACD,GArGH;;AAAA,SAuGEO,IAvGF,GAuGE,cAAK6B,GAAL;;;AACE,wBAA0BA,GAAG,CAACyB,QAA9B;AAAA,QAAgB9G,IAAhB,oBAAS2E,KAAT;AACA,QAAMoC,MAAM,GAAG1B,GAAG,CAACpC,KAAJ,IAAaoC,GAAG,CAACpC,KAAJ,CAAUsC,GAAV,CAAc,UAAAC,IAAI;AAAA,aAAI,MAAI,CAACC,KAAL,CAAW,CAACD,IAAD,CAAX,CAAJ;AAAA,KAAlB,CAA5B;AACA,WAAO;AAAEhB,MAAAA,IAAI,EAAE,UAAR;AAAoBxE,MAAAA,IAAI,EAAJA,IAApB;AAA0B+G,MAAAA,MAAM,EAANA;AAA1B,KAAP;AACD,GA3GH;;AAAA,SA6GExD,KA7GF,GA6GE,eAAM8B,GAAN;;;AACE,QAAMqB,IAAI,GAAGrB,GAAG,CAACpC,KAAJ,IAAaoC,GAAG,CAACpC,KAAJ,CAAUsC,GAAV,CAAc,UAAAC,IAAI;AAAA,aAAI,MAAI,CAACC,KAAL,CAAW,CAACD,IAAD,CAAX,CAAJ;AAAA,KAAlB,CAA1B;AACA,WAAO;AAAEhB,MAAAA,IAAI,EAAE,OAAR;AAAiBkC,MAAAA,IAAI,EAAJA;AAAjB,KAAP;AACD,GAhHH;;AAAA,SAkHEnC,QAlHF,GAkHE,kBACEc,GADF;AAGE,uBAAyBA,GAAG,CAAC2B,OAA7B;AAAA,QAAgBd,GAAhB,mBAASvB,KAAT;AACA,QAAM1B,KAAK,GAAG,KAAKwC,KAAL,CAAWJ,GAAG,CAACpC,KAAf,CAAd;AACA,WAAO;AAAEuB,MAAAA,IAAI,EAAE,UAAR;AAAoB0B,MAAAA,GAAG,EAAHA,GAApB;AAAyBjD,MAAAA,KAAK,EAALA;AAAzB,KAAP;AACD,GAxHH;;AAAA,SA0HEA,KA1HF,GA0HE,eAAMoC,GAAN;AACE,QAAI4B,OAAO,CAAC5B,GAAG,CAACpC,KAAL,CAAX,EAAwB;AACtB,uBAAoBoC,GAAG,CAACpC,KAAxB;AAAA,UAAS0B,KAAT,iBAASA,KAAT;AACA,aAAOA,KAAP;AACD;;AACD,WAAO,KAAKc,KAAL,CAAWJ,GAAG,CAACpC,KAAf,CAAP;AACD,GAhIH;;AAAA,mBAkIE,eAAKoC,GAAL;AACE,wBAA0BA,GAAG,CAAC6B,QAA9B;AAAA,QAAgBlH,IAAhB,oBAAS2E,KAAT;AACA,WAAO;AAAEH,MAAAA,IAAI,EAAE,YAAR;AAAsBxE,MAAAA,IAAI,EAAJA;AAAtB,KAAP;AACD,GArIH;;AAAA;AAAA,EAAmCgF,iBAAnC;;AAwIA,SAASiC,OAAT,CAAiBE,IAAjB;AACE,SAAO,WAAWA,IAAI,CAAC,CAAD,CAAtB;AACD;;SC3IeC,UAAUC;AACxB,MAAMC,YAAY,GAAG9E,WAAW,CAAC+E,QAAZ,CAAqBF,MAArB,CAArB;AACAtC,EAAAA,MAAM,CAACyC,KAAP,GAAeF,YAAY,CAACG,MAA5B;AACA,MAAMC,OAAO,GAAG3C,MAAM,CAACK,MAAP,EAAhB;AACA,MAAIL,MAAM,CAAC4C,MAAP,CAAcC,MAAd,GAAuB,CAA3B,EAA8B,MAAM7C,MAAM,CAAC4C,MAAP,CAAc,CAAd,CAAN;AAC9B,MAAME,OAAO,GAAG,IAAI3C,aAAJ,EAAhB;AACA,SAAO2C,OAAO,CAACpC,KAAR,CAAciC,OAAd,CAAP;AACD;;SCReI,YAAY1C;AAC1B,SACEA,MAAM,CAACE,IAAP,CACGC,GADH,CACOwC,UADP,EAEGC,MAFH,CAEUC,OAFV,EAGGC,IAHH,CAGQC,GAHR,EAIGC,OAJH,CAIW,iBAJX,EAI8BD,GAAG,GAAGA,GAJpC,IAI2CA,GAL7C;AAOD;;AAED,SAASJ,UAAT,CAAoBtD,KAApB;AACE,UAAQA,KAAK,CAACD,IAAd;AACE,SAAK,SAAL;AACE,aAAO6D,YAAY,CAAC5D,KAAD,CAAnB;;AACF,SAAK,YAAL;AACE,aAAO6D,eAAe,CAAC7D,KAAD,CAAtB;;AACF,SAAK,MAAL;AACE,aAAO8D,SAAS,CAAC9D,KAAD,CAAhB;;AACF,SAAK,WAAL;AACE,aAAO+D,cAAc,CAAC/D,KAAD,CAArB;;AACF,SAAK,OAAL;AACE,aAAOgE,UAAU,CAAChE,KAAD,CAAjB;;AACF,SAAK,OAAL;AACE,aAAOiE,UAAU,EAAjB;;AACF;AACE,YAAM,IAAI5C,KAAJ,2BAAN;AAdJ;AAgBD;;AAED,SAASuC,YAAT,CAAsBtE,OAAtB;AACE,SAAOA,OAAO,CAACgC,IAAf;AACD;;AAED,SAAS2C,UAAT;AACE,SAAOP,GAAP;AACD;;AAED,SAASG,eAAT,CAAyBK,EAAzB;AACE,MAAMC,QAAQ,GAAGC,2BAA2B,CAACF,EAAE,CAAChD,WAAJ,CAA5C;AAEA,2BACWgD,EAAE,CAAC3I,IADd,cAEE4I,QAFF;AAID;;AAED,SAASL,SAAT,CAAmBO,UAAnB;AACE,MAAMF,QAAQ,GAAGE,UAAU,CAACjD,WAAX,CACdN,GADc,CACVwD,eADU,EAEdf,MAFc,CAEPC,OAFO,EAGdC,IAHc,CAGNC,GAHM,SAIdC,OAJc,CAIN,iBAJM,EAIgBD,GAAG,GAAGA,GAJtB,QAAjB;AAMA,qBACKW,UAAU,CAAC9I,IADhB,cAEE4I,QAFF;AAID;;AAED,SAASG,eAAT,CACED,UADF;AAGE,UAAQA,UAAU,CAACtE,IAAnB;AACE,SAAK,YAAL;AACE,aAAOsE,UAAU,CAAC9I,IAAlB;;AACF,SAAK,SAAL;AACE,aAAOqI,YAAY,CAACS,UAAD,CAAnB;;AACF,SAAK,OAAL;AACE,aAAOJ,UAAU,EAAjB;;AACF;AACE,YAAM,IAAI5C,KAAJ,8BAAN;AARJ;AAUD;;AAED,SAAS0C,cAAT,CAAwBQ,SAAxB;AACE,MAAMJ,QAAQ,GAAGC,2BAA2B,CAACG,SAAS,CAACrD,WAAX,CAA5C;AAEA,0BACUqD,SAAS,CAAChJ,IADpB,cAEE4I,QAFF;AAID;;AAED,SAASH,UAAT,CAAoBQ,KAApB;AACE,MAAML,QAAQ,GAAGM,yBAAyB,CAACD,KAAK,CAACrD,UAAP,CAA1C;AAEA,sBACMqD,KAAK,CAACjJ,IADZ,cAEE4I,QAFF;AAID;;AAED,SAASO,eAAT,CACEhC,IADF,EAEEiC,SAFF;MAEEA;AAAAA,IAAAA,YAAY;;;AAEZ,UAAQjC,IAAI,CAAC3C,IAAb;AACE,SAAK,SAAL;AACE,aAAO6D,YAAY,CAAClB,IAAD,CAAnB;;AACF,SAAK,OAAL;AACE,aAAOuB,UAAU,EAAjB;;AACF,SAAK,YAAL;AACE,aAAUvB,IAAI,CAACjB,GAAL,CAASmD,MAAT,CAAgBD,SAAhB,CAAV,WAA0CE,UAAU,CAACnC,IAAI,CAAClE,KAAN,CAApD;;AACF;AACE,YAAM,IAAI6C,KAAJ,8BAAN;AARJ;AAUD;;AAED,SAASyD,aAAT,CACEpC,IADF,EAEEqC,UAFF,EAGEC,UAHF;MAEED;AAAAA,IAAAA,aAAa;;;MACbC;AAAAA,IAAAA,aAAa;;;AAEb,UAAQtC,IAAI,CAAC3C,IAAb;AACE,SAAK,WAAL;AACE,aAAOkF,cAAc,CAACvC,IAAD,CAArB;;AACF,SAAK,OAAL;AACE,aAAOwC,UAAU,CAACxC,IAAD,EAAOqC,UAAP,EAAmBC,UAAnB,CAAjB;;AACF,SAAK,SAAL;AACE,aAAOpB,YAAY,CAAClB,IAAD,CAAnB;;AACF,SAAK,OAAL;AACE,aAAOuB,UAAU,EAAjB;;AACF;AACE,YAAM,IAAI5C,KAAJ,8BAAN;AAVJ;AAYD;;AAED,SAAS4D,cAAT,CAAwB/F,SAAxB;AACE,MAAM+C,IAAI,GACR/C,SAAS,CAAC+C,IAAV,IAAkB/C,SAAS,CAAC+C,IAAV,CAAekB,MAAf,GAAwB,CAA1C,SACQjE,SAAS,CAAC+C,IAAV,CACDnB,GADC,CACGqE,iBADH,EAED5B,MAFC,CAEMC,OAFN,EAGDC,IAHC,CAGI,IAHJ,CADR,SAKI,EANN;AAQA,eAAUvE,SAAS,CAACiD,IAAV,KAAmB,OAAnB,GAA6B,GAA7B,GAAmC,IAA7C,IAAoDjD,SAAS,CAAC3D,IAA9D,GAAqE0G,IAArE;AACD;;AAED,SAASkD,iBAAT,CAA2BC,GAA3B;AACE,SAAOP,UAAU,CAACO,GAAG,CAAC5G,KAAL,CAAjB;AACD;;AAED,SAAS0G,UAAT,CAAoBzF,KAApB,EAAwCsF,UAAxC,EAAwDC,UAAxD;MAAwCD;AAAAA,IAAAA,aAAa;;;MAAGC;AAAAA,IAAAA,aAAa;;;AACnE,MAAMzJ,IAAI,GAAGkE,KAAK,CAAClE,IAAN,CAAWqJ,MAAX,CAAkBG,UAAlB,CAAb;AACA,MAAMrD,SAAS,GAAG2D,cAAc,CAAC5F,KAAD,CAAd,CAAsBmF,MAAtB,CAA6BI,UAA7B,CAAlB;AACA,MAAMM,KAAK,GAAG7F,KAAK,CAACmC,UAAN,GAAmBnC,KAAK,CAACmC,UAAN,CAAiBd,GAAjB,CAAqBmE,cAArB,CAAnB,GAA0D,EAAxE;AACA,SAAO,CAAC1J,IAAD,EAAOmG,SAAP,SAAqB4D,KAArB,EACJ/B,MADI,CACGC,OADH,EAEJC,IAFI,CAEC,GAFD,EAGJ8B,IAHI,EAAP;AAID;;AAED,SAASF,cAAT,CAAwB5F,KAAxB;AACE,MAAM+F,MAAM,GAAG/F,KAAK,CAACX,KAAN,GAAc,IAAd,GAAqBW,KAAK,CAACqC,QAAN,GAAiB,GAAjB,GAAuB,EAA3D;;AAEA,MAAI,OAAOrC,KAAK,CAACiC,SAAb,KAA2B,QAA/B,EAAyC;AACvC,YAAQjC,KAAK,CAACiC,SAAN,CAAgB3B,IAAxB;AACE,WAAK,UAAL;AAAiB;AACf,cAAMuC,MAAM,GAAG7C,KAAK,CAACiC,SAAN,CAAgBY,MAAhB,CAAuBxB,GAAvB,CAA2B+D,UAA3B,CAAf;AACA,iBAAUpF,KAAK,CAACiC,SAAN,CAAgBnG,IAA1B,SAAkC+G,MAAlC,SAA4CkD,MAA5C;AACD;;AACD;AACE,cAAM,IAAInE,KAAJ,yBAAN;AANJ;AAQD;;AAED,cAAU5B,KAAK,CAACiC,SAAhB,GAA4B8D,MAA5B;AACD;;AAED,SAASX,UAAT,CAAoBrG,KAApB;AACE,UAAQ,OAAOA,KAAf;AACE,SAAK,QAAL;AAAe;AACb,YAAI,UAAUA,KAAd,EAAqB;AACnB,kBAAQA,KAAK,CAACuB,IAAd;AACE,iBAAK,UAAL;AACE,qBAAUvB,KAAK,CAACiD,GAAhB,UAAwBoD,UAAU,CAACrG,KAAK,CAACA,KAAP,CAAlC;;AACF,iBAAK,UAAL;AACE,qBAAUA,KAAK,CAACjD,IAAhB,UACEiD,KAAK,CAAC8D,MAAN,GAAe9D,KAAK,CAAC8D,MAAN,CAAaxB,GAAb,CAAiB+D,UAAjB,CAAf,GAA8C,EADhD;;AAGF,iBAAK,OAAL;AACE,2BAAWrG,KAAK,CAACyD,IAAN,CAAWwB,IAAX,CAAgB,IAAhB,CAAX;;AACF;AACE,oBAAM,IAAIpC,KAAJ,yBAAN;AAVJ;AAYD;;AAED,cAAM,IAAIA,KAAJ,2BAAN;AACD;;AACD;AACE,aAAOoE,MAAM,CAACjH,KAAD,CAAb;AApBJ;AAsBD;;AAED,SAAS4F,2BAAT,CACEvD,IADF;AAGE,MAAI6E,GAAG,GAAG,CAAV;AACA,MAAMC,UAAU,GAAG9E,IAAI,CAAC+E,MAAL,CACjB,UAACC,IAAD,EAAOC,OAAP,EAAgBC,KAAhB,EAAuBC,GAAvB;AACE,QAAIF,OAAO,CAAC/F,IAAR,KAAiB,OAArB,EAA8B,OAAO8F,IAAP;AAC9B,QAAIE,KAAK,GAAG,CAAR,IAAaC,GAAG,CAACD,KAAK,GAAG,CAAT,CAAH,CAAehG,IAAf,KAAwB,OAAzC,EAAkD8F,IAAI,CAAC,EAAEH,GAAH,CAAJ,GAAc,EAAd;AAClDG,IAAAA,IAAI,CAACH,GAAD,CAAJ,CAAUO,IAAV,CAAeH,OAAf;AACA,WAAOD,IAAP;AACD,GANgB,EAOjB,CAAC,EAAD,CAPiB,CAAnB;AAUA,MAAMK,UAAU,GAAGP,UAAU,CAAC7E,GAAX,CAAe,UAAAqF,KAAK;AAAA,WACrCA,KAAK,CAACP,MAAN,CACE,UAACQ,GAAD,EAAMN,OAAN;AAAA,aACEO,IAAI,CAACD,GAAL,CACEA,GADF,EAGEN,OAAO,CAAC/F,IAAR,KAAiB,YAAjB,GAAgC+F,OAAO,CAACrE,GAAR,CAAY0B,MAA5C,GAAqD,CAHvD,CADF;AAAA,KADF,EAOE,CAPF,CADqC;AAAA,GAApB,CAAnB;AAYA,SAAOtC,IAAI,CACRC,GADI,CACA,UAACC,IAAD,EAAOgF,KAAP,EAAcC,GAAd;AACH,QAAID,KAAK,GAAG,CAAR,IAAahF,IAAI,CAAChB,IAAL,KAAc,OAA3B,IAAsCiG,GAAG,CAACD,KAAK,GAAG,CAAT,CAAH,CAAehG,IAAf,KAAwB,OAAlE,EACEmG,UAAU,CAACI,KAAX;AACF,WAAO5B,eAAe,CAAC3D,IAAD,EAAOmF,UAAU,CAAC,CAAD,CAAjB,CAAtB;AACD,GALI,EAMJ3C,MANI,CAMGC,OANH,EAOJC,IAPI,CAOIC,GAPJ,SAQJC,OARI,CAQI,iBARJ,EAQ0BD,GAAG,GAAGA,GARhC,QAAP;AASD;;AAED,SAASe,yBAAT,CACE5D,IADF;AAGE,MAAI6E,GAAG,GAAG,CAAV;AACA,MAAMC,UAAU,GAAG9E,IAAI,CAAC+E,MAAL,CACjB,UAACC,IAAD,EAAOC,OAAP,EAAgBC,KAAhB,EAAuBC,GAAvB;AACE,QAAIF,OAAO,CAAC/F,IAAR,KAAiB,OAArB,EAA8B,OAAO8F,IAAP;AAC9B,QAAIE,KAAK,GAAG,CAAR,IAAaC,GAAG,CAACD,KAAK,GAAG,CAAT,CAAH,CAAehG,IAAf,KAAwB,OAAzC,EAAkD8F,IAAI,CAAC,EAAEH,GAAH,CAAJ,GAAc,EAAd;AAClDG,IAAAA,IAAI,CAACH,GAAD,CAAJ,CAAUO,IAAV,CAAeH,OAAf;AACA,WAAOD,IAAP;AACD,GANgB,EAOjB,CAAC,EAAD,CAPiB,CAAnB;AAUA,MAAMU,WAAW,GAAGZ,UAAU,CAAC7E,GAAX,CAAe,UAAAqF,KAAK;AAAA,WACtCA,KAAK,CAACP,MAAN,CACE,UAACQ,GAAD,EAAMN,OAAN;AAAA,aACEO,IAAI,CAACD,GAAL,CACEA,GADF,EAGEN,OAAO,CAAC/F,IAAR,KAAiB,OAAjB,GAA2B+F,OAAO,CAACvK,IAAR,CAAa4H,MAAxC,GAAiD,CAHnD,CADF;AAAA,KADF,EAOE,CAPF,CADsC;AAAA,GAApB,CAApB;AAYA,MAAMqD,WAAW,GAAGb,UAAU,CAAC7E,GAAX,CAAe,UAAAqF,KAAK;AAAA,WACtCA,KAAK,CAACP,MAAN,CACE,UAACQ,GAAD,EAAMN,OAAN;AAAA,aACEO,IAAI,CAACD,GAAL,CACEA,GADF,EAGEN,OAAO,CAAC/F,IAAR,KAAiB,OAAjB,GAA2BsF,cAAc,CAACS,OAAD,CAAd,CAAwB3C,MAAnD,GAA4D,CAH9D,CADF;AAAA,KADF,EAOE,CAPF,CADsC;AAAA,GAApB,CAApB;AAYA,SAAOtC,IAAI,CACRC,GADI,CACA,UAAC2F,IAAD,EAAOV,KAAP,EAAcC,GAAd;AACH,QACED,KAAK,GAAG,CAAR,IACAU,IAAI,CAAC1G,IAAL,KAAc,OADd,IAEAiG,GAAG,CAACD,KAAK,GAAG,CAAT,CAAH,CAAehG,IAAf,KAAwB,OAH1B,EAIE;AACAwG,MAAAA,WAAW,CAACD,KAAZ;AACAE,MAAAA,WAAW,CAACF,KAAZ;AACD;;AAED,WAAOxB,aAAa,CAAC2B,IAAD,EAAOF,WAAW,CAAC,CAAD,CAAlB,EAAuBC,WAAW,CAAC,CAAD,CAAlC,CAApB;AACD,GAZI,EAaJjD,MAbI,CAaGC,OAbH,EAcJC,IAdI,CAcIC,GAdJ,SAeJC,OAfI,CAeI,iBAfJ,EAe0BD,GAAG,GAAGA,GAfhC,QAAP;AAgBD;;;;"}