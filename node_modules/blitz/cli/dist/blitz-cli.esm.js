import chalk from 'chalk';
import { join } from 'path';
import pkgDir from 'pkg-dir';
import resolveFrom from 'resolve-from';

function parseSemver(semver) {
  if (semver.startsWith("v")) {
    semver = semver.substring(1);
  }

  var _semver$split$map = semver.split(".").map(Number),
      major = _semver$split$map[0],
      minor = _semver$split$map[1],
      patch = _semver$split$map[2];

  return {
    major: major,
    minor: minor,
    patch: patch
  };
}

async function main() {
  var options = require("minimist")(process.argv.slice(2));

  if (parseSemver(process.version).major < 12) {
    console.log(chalk.yellow("You are using an unsupported version of Node.js. Please switch to v12 or newer.\n"));
    process.exit();
  }

  var globalBlitzPath = resolveFrom(__dirname, "blitz");
  var localBlitzPath = resolveFrom.silent(process.cwd(), "blitz");

  var isInDevelopmentAsGloballyLinked = __dirname.includes("packages/blitz/dist");

  var blitzPkgPath;

  if (isInDevelopmentAsGloballyLinked) {
    blitzPkgPath = globalBlitzPath;
  } else {
    // localBlitzPath won't exist if used outside a blitz app directory
    blitzPkgPath = localBlitzPath || globalBlitzPath;
  }

  var cliPkgPath = resolveFrom(blitzPkgPath, "@blitzjs/cli");

  var cli = require(cliPkgPath);

  var hasVersionFlag = options._.length === 0 && (options.v || options.version);
  var hasVerboseFlag = options._.length === 0 && (options.V || options.verbose);

  if (hasVersionFlag) {
    if (hasVerboseFlag) {
      console.log("debug: blitzPkgPath:", blitzPkgPath);
      console.log("debug: cliPkgPath:", cliPkgPath, "\n");
    }

    try {
      var osName = require("os-name");

      console.log(osName() + " | " + process.platform + "-" + process.arch + " | Node: " + process.version + "\n");
      var globalBlitzPkgJsonPath = pkgDir.sync(globalBlitzPath);
      var localBlitzPkgJsonPath = pkgDir.sync(localBlitzPath);

      if (globalBlitzPkgJsonPath !== localBlitzPkgJsonPath) {
        // This branch won't run if user does `npx blitz` or `yarn blitz`
        var globalVersion = require(join(globalBlitzPkgJsonPath, "package.json")).version;

        console.log("blitz: " + globalVersion + " (global)");
      }

      if (localBlitzPkgJsonPath) {
        var localVersion = require(join(localBlitzPkgJsonPath, "package.json")).version;

        console.log("blitz: " + localVersion + " (local)");
      }

      await printEnvInfo();
      console.log(""); // One last new line
    } catch (e) {
      throw new Error("Blitz Error: " + e);
    }

    process.exit(0);
  } else {
    cli.run();
  }
}
/**
 * Prints detailed system info
 */


async function printEnvInfo() {
  var hasYarn = require("has-yarn");

  var envinfo = require("envinfo");

  var packageManager = "\n  Package manager: " + (hasYarn() ? "yarn" : "npm");
  var env = await envinfo.run({
    System: ["OS", "CPU", "Memory", "Shell"],
    Binaries: ["Node", "Yarn", "npm", "Watchman"],
    npmPackages: ["blitz", "typescript", "react", "react-dom", "prisma", "@prisma/client"]
  }, {
    showNotFound: true
  });
  console.log(packageManager, env);
}

main()["catch"](function (e) {
  console.error(e);
});
