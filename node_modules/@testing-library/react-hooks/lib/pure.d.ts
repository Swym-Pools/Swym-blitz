import React from 'react';
import { act } from 'react-test-renderer';
import { cleanup, addCleanup, removeCleanup } from './cleanup';
export interface RenderHookOptions<TProps> {
    initialProps?: TProps;
    wrapper?: React.ComponentType<TProps>;
}
declare function renderHook<TProps, TResult>(callback: (props: TProps) => TResult, { initialProps, wrapper }?: RenderHookOptions<TProps>): {
    waitFor: (callback: () => boolean | void, { interval, timeout, suppressErrors }?: import("./asyncUtils").WaitOptions) => Promise<void>;
    waitForNextUpdate: ({ timeout }?: Pick<import("./asyncUtils").WaitOptions, "timeout">) => Promise<void>;
    waitForValueToChange: (selector: () => unknown, options?: import("./asyncUtils").WaitOptions) => Promise<void>;
    result: {
        readonly all: (Error | TResult | undefined)[];
        readonly current: TResult;
        readonly error: Error | undefined;
    };
    rerender: (newProps?: typeof initialProps) => void;
    unmount: () => void;
};
export { renderHook, cleanup, addCleanup, removeCleanup, act };
