{"version":3,"file":"react-final-form.umd.min.js","sources":["../node_modules/@babel/runtime/helpers/esm/extends.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../src/renderComponent.js","../src/useWhenValueChanges.js","../src/shallowEqual.js","../src/isSyntheticEvent.js","../src/context.js","../src/useLatest.js","../src/getters.js","../src/ReactFinalForm.js","../src/useConstant.js","../src/useForm.js","../src/useFormState.js","../src/FormSpy.js","../src/useField.js","../src/isReactNative.js","../src/getValue.js","../src/Field.js","../src/index.js"],"sourcesContent":["export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","// @flow\nimport * as React from 'react'\nimport type { RenderableProps } from './types'\n\n// shared logic between components that use either render prop,\n// children render function, or component prop\nexport default function renderComponent<T>(\n  props: RenderableProps<T> & T,\n  lazyProps: Object,\n  name: string\n): React.Node {\n  const { render, children, component, ...rest } = props\n  if (component) {\n    return React.createElement(\n      component,\n      Object.assign(lazyProps, rest, {\n        children,\n        render\n      })\n    )\n  }\n  if (render) {\n    return render(\n      children === undefined\n        ? Object.assign(lazyProps, rest)\n        : // inject children back in\n          Object.assign(lazyProps, rest, { children })\n    )\n  }\n  if (typeof children !== 'function') {\n    throw new Error(\n      `Must specify either a render prop, a render function as children, or a component prop to ${name}`\n    )\n  }\n  return children(Object.assign(lazyProps, rest))\n}\n","// @flow\nimport React from 'react'\n\nexport default function useWhenValueChanges(\n  value: any,\n  callback: () => void,\n  isEqual: (any, any) => boolean = (a, b) => a === b\n) {\n  const previous = React.useRef(value)\n  React.useEffect(() => {\n    if (!isEqual(value, previous.current)) {\n      callback()\n      previous.current = value\n    }\n  })\n}\n","// @flow\nconst shallowEqual = (a: any, b: any): boolean => {\n  if (a === b) {\n    return true\n  }\n  if (typeof a !== 'object' || !a || typeof b !== 'object' || !b) {\n    return false\n  }\n  var keysA = Object.keys(a)\n  var keysB = Object.keys(b)\n  if (keysA.length !== keysB.length) {\n    return false\n  }\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(b)\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx]\n    if (!bHasOwnProperty(key) || a[key] !== b[key]) {\n      return false\n    }\n  }\n  return true\n}\n\nexport default shallowEqual\n","// @flow\nconst isSyntheticEvent = (candidate: any): boolean =>\n  !!(candidate && typeof candidate.stopPropagation === 'function')\n\nexport default isSyntheticEvent\n","// @flow\nimport * as React from 'react'\nimport type { FormApi } from 'final-form'\n\nexport default React.createContext<?FormApi<any>>()\n","// @flow\nimport React from 'react'\n\nexport default function useLatest<T>(value: T): { +current: T } {\n  const ref = React.useRef(value)\n\n  React.useEffect(() => {\n    ref.current = value\n  })\n\n  return ref\n}\n","import type { FormState, FieldState } from 'final-form'\n\nconst addLazyState = (dest: Object, state: Object, keys: string[]): void => {\n  keys.forEach(key => {\n    Object.defineProperty(dest, key, {\n      get: () => state[key],\n      enumerable: true\n    })\n  })\n}\n\nexport const addLazyFormState = (dest: Object, state: FormState): void =>\n  addLazyState(dest, state, [\n    'active',\n    'dirty',\n    'dirtyFields',\n    'dirtySinceLastSubmit',\n    'dirtyFieldsSinceLastSubmit',\n    'error',\n    'errors',\n    'hasSubmitErrors',\n    'hasValidationErrors',\n    'initialValues',\n    'invalid',\n    'modified',\n    'modifiedSinceLastSubmit',\n    'pristine',\n    'submitError',\n    'submitErrors',\n    'submitFailed',\n    'submitSucceeded',\n    'submitting',\n    'touched',\n    'valid',\n    'validating',\n    'values',\n    'visited'\n  ])\n\nexport const addLazyFieldMetaState = (dest: Object, state: FieldState): void =>\n  addLazyState(dest, state, [\n    'active',\n    'data',\n    'dirty',\n    'dirtySinceLastSubmit',\n    'error',\n    'initial',\n    'invalid',\n    'length',\n    'modified',\n    'modifiedSinceLastSubmit',\n    'pristine',\n    'submitError',\n    'submitFailed',\n    'submitSucceeded',\n    'submitting',\n    'touched',\n    'valid',\n    'validating',\n    'visited'\n  ])\n","// @flow\nimport * as React from 'react'\nimport {\n  createForm,\n  formSubscriptionItems,\n  version as ffVersion\n} from 'final-form'\nimport type {\n  FormApi,\n  Config,\n  FormSubscription,\n  FormState,\n  FormValuesShape,\n  Unsubscribe\n} from 'final-form'\nimport type { FormProps as Props, SubmitEvent } from './types'\nimport renderComponent from './renderComponent'\nimport useWhenValueChanges from './useWhenValueChanges'\nimport useConstant from './useConstant'\nimport shallowEqual from './shallowEqual'\nimport isSyntheticEvent from './isSyntheticEvent'\nimport type { FormRenderProps } from './types.js.flow'\nimport ReactFinalFormContext from './context'\nimport useLatest from './useLatest'\nimport { version } from '../package.json'\nimport { addLazyFormState } from './getters'\n\nexport { version }\n\nconst versions = {\n  'final-form': ffVersion,\n  'react-final-form': version\n}\n\nexport const all: FormSubscription = formSubscriptionItems.reduce(\n  (result, key) => {\n    result[key] = true\n    return result\n  },\n  {}\n)\n\nfunction ReactFinalForm<FormValues: FormValuesShape>({\n  debug,\n  decorators,\n  destroyOnUnregister,\n  form: alternateFormApi,\n  initialValues,\n  initialValuesEqual,\n  keepDirtyOnReinitialize,\n  mutators,\n  onSubmit,\n  subscription = all,\n  validate,\n  validateOnBlur,\n  ...rest\n}: Props<FormValues>) {\n  const config: Config<FormValues> = {\n    debug,\n    destroyOnUnregister,\n    initialValues,\n    keepDirtyOnReinitialize,\n    mutators,\n    onSubmit,\n    validate,\n    validateOnBlur\n  }\n\n  const form: FormApi<FormValues> = useConstant(() => {\n    const f = alternateFormApi || createForm<FormValues>(config)\n    // pause validation until children register all fields on first render (unpaused in useEffect() below)\n    f.pauseValidation()\n    return f\n  })\n\n  // synchronously register and unregister to query form state for our subscription on first render\n  const [state, setState] = React.useState<FormState<FormValues>>(\n    (): FormState<FormValues> => {\n      let initialState: FormState<FormValues> = {}\n      form.subscribe(state => {\n        initialState = state\n      }, subscription)()\n      return initialState\n    }\n  )\n\n  // save a copy of state that can break through the closure\n  // on the shallowEqual() line below.\n  const stateRef = useLatest<FormState<FormValues>>(state)\n\n  React.useEffect(() => {\n    // We have rendered, so all fields are now registered, so we can unpause validation\n    form.isValidationPaused() && form.resumeValidation()\n    const unsubscriptions: Unsubscribe[] = [\n      form.subscribe(s => {\n        if (!shallowEqual(s, stateRef.current)) {\n          setState(s)\n        }\n      }, subscription),\n      ...(decorators\n        ? decorators.map(decorator =>\n            // this noop ternary is to appease the flow gods\n            // istanbul ignore next\n            decorator(form)\n          )\n        : [])\n    ]\n\n    return () => {\n      form.pauseValidation() // pause validation so we don't revalidate on every field deregistration\n      unsubscriptions.reverse().forEach(unsubscribe => unsubscribe())\n      // don't need to resume validation here; either unmounting, or will re-run this hook with new deps\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [decorators])\n\n  // warn about decorator changes\n  // istanbul ignore next\n  if (process.env.NODE_ENV !== 'production') {\n    // You're never supposed to use hooks inside a conditional, but in this\n    // case we can be certain that you're not going to be changing your\n    // NODE_ENV between renders, so this is safe.\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useWhenValueChanges(\n      decorators,\n      () => {\n        console.error(\n          'Form decorators should not change from one render to the next as new values will be ignored'\n        )\n      },\n      shallowEqual\n    )\n  }\n\n  // allow updatable config\n  useWhenValueChanges(debug, () => {\n    form.setConfig('debug', debug)\n  })\n  useWhenValueChanges(destroyOnUnregister, () => {\n    form.destroyOnUnregister = !!destroyOnUnregister\n  })\n  useWhenValueChanges(keepDirtyOnReinitialize, () => {\n    form.setConfig('keepDirtyOnReinitialize', keepDirtyOnReinitialize)\n  })\n  useWhenValueChanges(\n    initialValues,\n    () => {\n      form.setConfig('initialValues', initialValues)\n    },\n    initialValuesEqual || shallowEqual\n  )\n  useWhenValueChanges(mutators, () => {\n    form.setConfig('mutators', mutators)\n  })\n  useWhenValueChanges(onSubmit, () => {\n    form.setConfig('onSubmit', onSubmit)\n  })\n  useWhenValueChanges(validate, () => {\n    form.setConfig('validate', validate)\n  })\n  useWhenValueChanges(validateOnBlur, () => {\n    form.setConfig('validateOnBlur', validateOnBlur)\n  })\n\n  const handleSubmit = (event: ?SubmitEvent) => {\n    if (event) {\n      // sometimes not true, e.g. React Native\n      if (typeof event.preventDefault === 'function') {\n        event.preventDefault()\n      }\n      if (typeof event.stopPropagation === 'function') {\n        // prevent any outer forms from receiving the event too\n        event.stopPropagation()\n      }\n    }\n    return form.submit()\n  }\n\n  const renderProps: FormRenderProps<FormValues> = {\n    form: {\n      ...form,\n      reset: eventOrValues => {\n        if (isSyntheticEvent(eventOrValues)) {\n          // it's a React SyntheticEvent, call reset with no arguments\n          form.reset()\n        } else {\n          form.reset(eventOrValues)\n        }\n      }\n    },\n    handleSubmit\n  }\n  addLazyFormState(renderProps, state)\n  return React.createElement(\n    ReactFinalFormContext.Provider,\n    { value: form },\n    renderComponent(\n      {\n        ...rest,\n        __versions: versions\n      },\n      renderProps,\n      'ReactFinalForm'\n    )\n  )\n}\n\nexport default ReactFinalForm\n","// @flow\nimport React from 'react'\n\n/**\n * A simple hook to create a constant value that lives for\n * the lifetime of the component.\n *\n * Plagiarized from https://github.com/Andarist/use-constant\n *\n * Do NOT reuse this code unless you know what you're doing.\n * Use Andarist's hook; it's more fault tolerant to things like\n * falsy values.\n *\n * @param {Function} init - A function to generate the value\n */\nexport default function useConstant<T>(init: () => T): T {\n  const ref = React.useRef<?T>()\n  if (!ref.current) {\n    ref.current = init()\n  }\n  return ref.current\n}\n","// @flow\nimport * as React from 'react'\nimport type { FormApi, FormValuesShape } from 'final-form'\nimport ReactFinalFormContext from './context'\n\nfunction useForm<FormValues: FormValuesShape>(\n  componentName?: string\n): FormApi<FormValues> {\n  const form: ?FormApi<FormValues> = React.useContext(ReactFinalFormContext)\n  if (!form) {\n    throw new Error(\n      `${componentName || 'useForm'} must be used inside of a <Form> component`\n    )\n  }\n  return form\n}\n\nexport default useForm\n","// @flow\nimport * as React from 'react'\nimport type { UseFormStateParams } from './types'\nimport type { FormState, FormApi, FormValuesShape } from 'final-form'\nimport { all } from './ReactFinalForm'\nimport useForm from './useForm'\nimport { addLazyFormState } from './getters'\n\nfunction useFormState<FormValues: FormValuesShape>({\n  onChange,\n  subscription = all\n}: UseFormStateParams<FormValues> = {}): FormState<FormValues> {\n  const form: FormApi<FormValues> = useForm<FormValues>('useFormState')\n  const firstRender = React.useRef(true)\n  const onChangeRef = React.useRef(onChange)\n  onChangeRef.current = onChange\n\n  // synchronously register and unregister to query field state for our subscription on first render\n  const [state, setState] = React.useState<FormState<FormValues>>(\n    (): FormState<FormValues> => {\n      let initialState: FormState<FormValues> = {}\n      form.subscribe(state => {\n        initialState = state\n      }, subscription)()\n      if (onChange) {\n        onChange(initialState)\n      }\n      return initialState\n    }\n  )\n\n  React.useEffect(\n    () =>\n      form.subscribe(newState => {\n        if (firstRender.current) {\n          firstRender.current = false\n        } else {\n          setState(newState)\n          if (onChangeRef.current) {\n            onChangeRef.current(newState)\n          }\n        }\n      }, subscription),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  )\n  const lazyState = {}\n  addLazyFormState(lazyState, state)\n  return lazyState\n}\n\nexport default useFormState\n","// @flow\nimport renderComponent from './renderComponent'\nimport type { FormSpyPropsWithForm as Props, FormSpyRenderProps } from './types'\nimport type { FormValuesShape } from 'final-form'\nimport isSyntheticEvent from './isSyntheticEvent'\nimport useForm from './useForm'\nimport useFormState from './useFormState'\n\nfunction FormSpy<FormValues: FormValuesShape>({\n  onChange,\n  subscription,\n  ...rest\n}: Props<FormValues>) {\n  const reactFinalForm = useForm<FormValues>('FormSpy')\n  const state = useFormState({ onChange, subscription })\n  if (onChange) {\n    return null\n  }\n\n  const renderProps: FormSpyRenderProps<FormValues> = {\n    form: {\n      ...reactFinalForm,\n      reset: eventOrValues => {\n        if (isSyntheticEvent(eventOrValues)) {\n          // it's a React SyntheticEvent, call reset with no arguments\n          reactFinalForm.reset()\n        } else {\n          reactFinalForm.reset(eventOrValues)\n        }\n      }\n    }\n  }\n  return renderComponent(\n    {\n      ...rest,\n      ...renderProps\n    },\n    state,\n    'FormSpy'\n  )\n}\n\nexport default FormSpy\n","// @flow\nimport * as React from 'react'\nimport { fieldSubscriptionItems } from 'final-form'\nimport type {\n  FieldSubscription,\n  FieldState,\n  FormApi,\n  FormValuesShape\n} from 'final-form'\nimport type { UseFieldConfig, FieldInputProps, FieldRenderProps } from './types'\nimport isReactNative from './isReactNative'\nimport getValue from './getValue'\nimport useForm from './useForm'\nimport useLatest from './useLatest'\nimport { addLazyFieldMetaState } from './getters'\n\nconst all: FieldSubscription = fieldSubscriptionItems.reduce((result, key) => {\n  result[key] = true\n  return result\n}, {})\n\nconst defaultFormat = (value: ?any, name: string) =>\n  value === undefined ? '' : value\nconst defaultParse = (value: ?any, name: string) =>\n  value === '' ? undefined : value\n\nconst defaultIsEqual = (a: any, b: any): boolean => a === b\n\nfunction useField<FormValues: FormValuesShape>(\n  name: string,\n  config: UseFieldConfig = {}\n): FieldRenderProps {\n  const {\n    afterSubmit,\n    allowNull,\n    component,\n    data,\n    defaultValue,\n    format = defaultFormat,\n    formatOnBlur,\n    initialValue,\n    multiple,\n    parse = defaultParse,\n    subscription = all,\n    type,\n    validateFields,\n    value: _value\n  } = config\n  const form: FormApi<FormValues> = useForm<FormValues>('useField')\n\n  const configRef = useLatest(config)\n\n  const register = (callback: FieldState => void, silent: boolean) =>\n    // avoid using `state` const in any closures created inside `register`\n    // because they would refer `state` from current execution context\n    // whereas actual `state` would defined in the subsequent `useField` hook\n    // execution\n    // (that would be caused by `setState` call performed in `register` callback)\n    form.registerField(name, callback, subscription, {\n      afterSubmit,\n      beforeSubmit: () => {\n        const {\n          beforeSubmit,\n          formatOnBlur,\n          format = defaultFormat\n        } = configRef.current\n\n        if (formatOnBlur) {\n          const { value } = ((form.getFieldState(name): any): FieldState)\n          const formatted = format(value, name)\n\n          if (formatted !== value) {\n            form.change(name, formatted)\n          }\n        }\n\n        return beforeSubmit && beforeSubmit()\n      },\n      data,\n      defaultValue,\n      getValidator: () => configRef.current.validate,\n      initialValue,\n      isEqual: (a, b) => (configRef.current.isEqual || defaultIsEqual)(a, b),\n      silent,\n      validateFields\n    })\n\n  const firstRender = React.useRef(true)\n\n  // synchronously register and unregister to query field state for our subscription on first render\n  const [state, setState] = React.useState<FieldState>((): FieldState => {\n    let initialState: FieldState = {}\n\n    // temporarily disable destroyOnUnregister\n    const destroyOnUnregister = form.destroyOnUnregister\n    form.destroyOnUnregister = false\n\n    register(state => {\n      initialState = state\n    }, true)()\n\n    // return destroyOnUnregister to its original value\n    form.destroyOnUnregister = destroyOnUnregister\n\n    return initialState\n  })\n\n  React.useEffect(\n    () =>\n      register(state => {\n        if (firstRender.current) {\n          firstRender.current = false\n        } else {\n          setState(state)\n        }\n      }, false),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      name,\n      data,\n      defaultValue,\n      // If we want to allow inline fat-arrow field-level validation functions, we\n      // cannot reregister field every time validate function !==.\n      // validate,\n      initialValue\n      // The validateFields array is often passed as validateFields={[]}, creating\n      // a !== new array every time. If it needs to be changed, a rerender/reregister\n      // can be forced by changing the key prop\n      // validateFields\n    ]\n  )\n\n  const handlers = {\n    onBlur: React.useCallback(\n      (event: ?SyntheticFocusEvent<*>) => {\n        state.blur()\n        if (formatOnBlur) {\n          /**\n           * Here we must fetch the value directly from Final Form because we cannot\n           * trust that our `state` closure has the most recent value. This is a problem\n           * if-and-only-if the library consumer has called `onChange()` immediately\n           * before calling `onBlur()`, but before the field has had a chance to receive\n           * the value update from Final Form.\n           */\n          const fieldState: any = form.getFieldState(state.name)\n          state.change(format(fieldState.value, state.name))\n        }\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [state.blur, state.name, format, formatOnBlur]\n    ),\n    onChange: React.useCallback(\n      (event: SyntheticInputEvent<*> | any) => {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production' && event && event.target) {\n          const targetType = event.target.type\n          const unknown =\n            ~['checkbox', 'radio', 'select-multiple'].indexOf(targetType) &&\n            !type &&\n            component !== 'select'\n\n          const value: any =\n            targetType === 'select-multiple' ? state.value : _value\n\n          if (unknown) {\n            console.error(\n              `You must pass \\`type=\"${\n                targetType === 'select-multiple' ? 'select' : targetType\n              }\"\\` prop to your Field(${name}) component.\\n` +\n                `Without it we don't know how to unpack your \\`value\\` prop - ${\n                  Array.isArray(value) ? `[${value}]` : `\"${value}\"`\n                }.`\n            )\n          }\n        }\n\n        const value: any =\n          event && event.target\n            ? getValue(event, state.value, _value, isReactNative)\n            : event\n        state.change(parse(value, name))\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [_value, name, parse, state.change, state.value, type]\n    ),\n    onFocus: React.useCallback(\n      (event: ?SyntheticFocusEvent<*>) => {\n        state.focus()\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [state.focus]\n    )\n  }\n\n  const meta = {}\n  addLazyFieldMetaState(meta, state)\n  const input: FieldInputProps = {\n    name,\n    get value() {\n      let value = state.value\n      if (formatOnBlur) {\n        if (component === 'input') {\n          value = defaultFormat(value, name)\n        }\n      } else {\n        value = format(value, name)\n      }\n      if (value === null && !allowNull) {\n        value = ''\n      }\n      if (type === 'checkbox' || type === 'radio') {\n        return _value\n      } else if (component === 'select' && multiple) {\n        return value || []\n      }\n      return value\n    },\n    get checked() {\n      let value = state.value;\n      if (type === 'checkbox') {\n        value = format(value, name)\n        if (_value === undefined) {\n          return !!value\n        } else {\n          return !!(Array.isArray(value) && ~value.indexOf(_value))\n        }\n      } else if (type === 'radio') {\n        return format(value, name) === _value\n      }\n      return undefined\n    },\n    ...handlers\n  }\n\n  if (multiple) {\n    input.multiple = multiple\n  }\n  if (type !== undefined) {\n    input.type = type\n  }\n\n  const renderProps: FieldRenderProps = { input, meta } // assign to force Flow check\n  return renderProps\n}\n\nexport default useField\n","// @flow\nconst isReactNative =\n  typeof window !== 'undefined' &&\n  window.navigator &&\n  window.navigator.product &&\n  window.navigator.product === 'ReactNative'\n\nexport default isReactNative\n","// @flow\nconst getSelectedValues = options => {\n  const result = []\n  if (options) {\n    for (let index = 0; index < options.length; index++) {\n      const option = options[index]\n      if (option.selected) {\n        result.push(option.value)\n      }\n    }\n  }\n  return result\n}\n\nconst getValue = (\n  event: SyntheticInputEvent<*>,\n  currentValue: any,\n  valueProp: any,\n  isReactNative: boolean\n) => {\n  if (\n    !isReactNative &&\n    event.nativeEvent &&\n    (event.nativeEvent: Object).text !== undefined\n  ) {\n    return (event.nativeEvent: Object).text\n  }\n  if (isReactNative && event.nativeEvent) {\n    return (event.nativeEvent: any).text\n  }\n  const detypedEvent: any = event\n  const { target: { type, value, checked } } = detypedEvent\n  switch (type) {\n    case 'checkbox':\n      if (valueProp !== undefined) {\n        // we are maintaining an array, not just a boolean\n        if (checked) {\n          // add value to current array value\n          return Array.isArray(currentValue)\n            ? currentValue.concat(valueProp)\n            : [valueProp]\n        } else {\n          // remove value from current array value\n          if (!Array.isArray(currentValue)) {\n            return currentValue\n          }\n          const index = currentValue.indexOf(valueProp)\n          if (index < 0) {\n            return currentValue\n          } else {\n            return currentValue\n              .slice(0, index)\n              .concat(currentValue.slice(index + 1))\n          }\n        }\n      } else {\n        // it's just a boolean\n        return !!checked\n      }\n    case 'select-multiple':\n      return getSelectedValues((event.target: any).options)\n    default:\n      return value\n  }\n}\n\nexport default getValue\n","// @flow\nimport * as React from 'react'\nimport type { FieldProps as Props, FieldRenderProps } from './types'\nimport renderComponent from './renderComponent'\nimport useField from './useField'\n\nconst Field = React.forwardRef<any, Props>(function Field(\n  {\n    afterSubmit,\n    allowNull,\n    beforeSubmit,\n    children,\n    component,\n    data,\n    defaultValue,\n    format,\n    formatOnBlur,\n    initialValue,\n    isEqual,\n    multiple,\n    name,\n    parse,\n    subscription,\n    type,\n    validate,\n    validateFields,\n    value,\n    ...rest\n  }: Props,\n  ref\n) {\n  const field: FieldRenderProps = useField(name, {\n    afterSubmit,\n    allowNull,\n    beforeSubmit,\n    children,\n    component,\n    data,\n    defaultValue,\n    format,\n    formatOnBlur,\n    initialValue,\n    isEqual,\n    multiple,\n    parse,\n    subscription,\n    type,\n    validate,\n    validateFields,\n    value\n  })\n\n  if (typeof children === 'function') {\n    return (children: Function)({ ...field, ...rest })\n  }\n\n  if (typeof component === 'string') {\n    // ignore meta, combine input with any other props\n    return React.createElement(component, {\n      ...field.input,\n      children,\n      ref,\n      ...rest\n    })\n  }\n\n  if (!name) {\n    throw new Error('prop name cannot be undefined in <Field> component')\n  }\n\n  return renderComponent(\n    { children, component, ref, ...rest },\n    field,\n    `Field(${name})`\n  )\n})\n\nexport default Field\n","// @flow\nimport Form from './ReactFinalForm'\nimport FormSpy from './FormSpy'\nexport { default as Field } from './Field'\nexport { default as Form, version } from './ReactFinalForm'\nexport { default as FormSpy } from './FormSpy'\nexport { default as useField } from './useField'\nexport { default as useFormState } from './useFormState'\nexport { default as useForm } from './useForm'\nexport function withTypes() {\n  return { Form, FormSpy }\n}\n"],"names":["_extends","Object","assign","target","i","arguments","length","key","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","renderComponent","props","lazyProps","name","render","children","component","rest","React","createElement","undefined","Error","useWhenValueChanges","value","callback","isEqual","a","b","previous","useRef","useEffect","current","shallowEqual","keysA","keysB","bHasOwnProperty","bind","idx","isSyntheticEvent","candidate","stopPropagation","createContext","useLatest","ref","addLazyState","dest","state","forEach","defineProperty","get","enumerable","addLazyFormState","versions","ffVersion","version","all","formSubscriptionItems","reduce","result","ReactFinalForm","debug","decorators","destroyOnUnregister","alternateFormApi","form","initialValues","initialValuesEqual","keepDirtyOnReinitialize","mutators","onSubmit","subscription","validate","validateOnBlur","config","init","f","createForm","pauseValidation","useState","initialState","subscribe","setState","stateRef","isValidationPaused","resumeValidation","unsubscriptions","s","map","decorator","reverse","unsubscribe","setConfig","renderProps","reset","eventOrValues","handleSubmit","event","preventDefault","submit","ReactFinalFormContext","Provider","__versions","useForm","componentName","useContext","useFormState","onChange","firstRender","onChangeRef","newState","lazyState","FormSpy","reactFinalForm","defaultFormat","defaultParse","isReactNative","window","navigator","product","fieldSubscriptionItems","defaultIsEqual","useField","register","silent","registerField","afterSubmit","beforeSubmit","configRef","formatOnBlur","format","formatted","getFieldState","change","data","defaultValue","getValidator","initialValue","validateFields","allowNull","multiple","parse","type","_value","handlers","onBlur","useCallback","fieldState","blur","currentValue","valueProp","nativeEvent","text","checked","Array","isArray","concat","index","slice","options","option","selected","push","getSelectedValues","getValue","onFocus","focus","meta","input","forwardRef","field","Form"],"mappings":"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"}