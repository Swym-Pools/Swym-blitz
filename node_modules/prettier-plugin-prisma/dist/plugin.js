var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// src/plugin.ts
__markAsModule(exports);
__export(exports, {
  languages: () => languages,
  parsers: () => parsers,
  printers: () => printers
});
var import_path = __toModule(require("path"));
var prismaFormatter;
function formatSchema(input) {
  if (!prismaFormatter) {
    const formatterPath = "prisma_formatter.js";
    if (!formatterPath) {
      throw new Error("'PRISMA_FORMATTER_PATH' not defined");
    }
    try {
      prismaFormatter = require((0, import_path.join)(__dirname, formatterPath));
    } catch (error) {
      if (error instanceof Error && error.code === "MODULE_NOT_FOUND") {
        throw new Error("File defined in 'PRISMA_FORMATTER_PATH' not found");
      }
      throw error;
    }
  }
  return prismaFormatter.format(input);
}
var {languages, parsers, printers} = {
  languages: [
    {
      name: "Prisma",
      extensions: [".prisma"],
      parsers: ["prisma-parse"]
    }
  ],
  parsers: {
    "prisma-parse": {
      astFormat: "prisma-ast",
      parse: (text) => ({text}),
      locStart: () => 0,
      locEnd: (node) => node.text.length
    }
  },
  printers: {
    "prisma-ast": {
      print: (path) => formatSchema(path.getValue().text)
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  languages,
  parsers,
  printers
});
