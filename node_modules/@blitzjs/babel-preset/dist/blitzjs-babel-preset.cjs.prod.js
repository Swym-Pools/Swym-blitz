'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@babel/core');
var helperModuleImports = require('@babel/helper-module-imports');

function functionDeclarationToExpression(declaration) {
  return core.types.functionExpression(declaration.id, declaration.params, declaration.body, declaration.generator, declaration.async);
}
function classDeclarationToExpression(declaration) {
  return core.types.classExpression(declaration.id, declaration.superClass, declaration.body, declaration.decorators);
}
function getFileName(state) {
  var filename = state.filename,
      cwd = state.cwd;

  if (!filename) {
    return undefined;
  }

  if (cwd && filename.startsWith(cwd)) {
    return filename.slice(cwd.length);
  }

  return filename;
}
function wrapExportDefaultDeclaration(path, HOFName, importFrom) {
  function wrapInHOF(path, expr) {
    return core.types.callExpression(helperModuleImports.addNamed(path, HOFName, importFrom), [expr]);
  }

  var node = path.node;

  if (core.types.isIdentifier(node.declaration) || core.types.isFunctionExpression(node.declaration) || core.types.isCallExpression(node.declaration)) {
    node.declaration = wrapInHOF(path, node.declaration);
  } else if (core.types.isFunctionDeclaration(node.declaration) || core.types.isClassDeclaration(node.declaration)) {
    if (node.declaration.id) {
      path.insertBefore(node.declaration);
      node.declaration = wrapInHOF(path, node.declaration.id);
    } else {
      if (core.types.isFunctionDeclaration(node.declaration)) {
        node.declaration = wrapInHOF(path, functionDeclarationToExpression(node.declaration));
      } else {
        node.declaration = wrapInHOF(path, classDeclarationToExpression(node.declaration));
      }
    }
  }
}

function AddBlitzAppRoot() {
  return {
    name: 'AddBlitzAppRoot',
    visitor: {
      ExportDefaultDeclaration: function ExportDefaultDeclaration(path, state) {
        var filePath = getFileName(state);

        if (!(filePath != null && filePath.match(/_app\./))) {
          return;
        }

        wrapExportDefaultDeclaration(path, 'withBlitzAppRoot', '@blitzjs/core');
      }
    }
  };
} // eslint-disable-next-line import/no-default-export

/*
 * https://astexplorer.net/#/gist/dd0cdbd56a701d8c9e078d20505b3980/latest
 */
var defaultImportSource = '@blitzjs/core';
var specialImports = {
  Image: '@blitzjs/core/image',
  Head: '@blitzjs/core/head',
  App: '@blitzjs/core/app',
  dynamic: '@blitzjs/core/dynamic',
  noSSR: '@blitzjs/core/dynamic',
  getConfig: '@blitzjs/core/config',
  setConfig: '@blitzjs/core/config',
  Document: '@blitzjs/core/document',
  DocumentHead: '@blitzjs/core/document',
  Html: '@blitzjs/core/document',
  Main: '@blitzjs/core/document',
  BlitzScript: '@blitzjs/core/document',
  getAllMiddlewareForModule: '@blitzjs/core/server',
  handleRequestWithMiddleware: '@blitzjs/core/server',
  connectMiddleware: '@blitzjs/core/server',
  invokeWithMiddleware: '@blitzjs/core/server',
  paginate: '@blitzjs/core/server',
  resolver: '@blitzjs/core/server',
  isLocalhost: '@blitzjs/core/server',
  passportAuth: '@blitzjs/core/server',
  sessionMiddleware: '@blitzjs/core/server',
  simpleRolesIsAuthorized: '@blitzjs/core/server',
  getSession: '@blitzjs/core/server',
  SecurePassword: '@blitzjs/core/server',
  hash256: '@blitzjs/core/server',
  generateToken: '@blitzjs/core/server',
  rpcApiHandler: '@blitzjs/core/server'
};

function RewriteImports(babel) {
  var t = babel.types;
  return {
    name: 'RewriteImports',
    visitor: {
      ImportDeclaration: function ImportDeclaration(path) {
        if (!looksLike(path, {
          node: {
            source: {
              value: 'blitz'
            }
          }
        })) {
          return;
        }

        path.node.source = t.stringLiteral(defaultImportSource);
        var specifierIndexesToRemove = [];
        path.node.specifiers.slice().forEach(function (specifier, index) {
          if (!t.isImportSpecifier(specifier)) return;
          var importedName = t.isStringLiteral(specifier.imported) ? specifier.imported.value : specifier.imported.name;

          if (importedName in specialImports) {
            path.insertAfter(t.importDeclaration([specifier], t.stringLiteral(specialImports[importedName])));
            specifierIndexesToRemove.push(index);
          }
        });
        specifierIndexesToRemove.reverse().forEach(function (index) {
          path.node.specifiers.splice(index, 1);
        });

        if (!path.node.specifiers.length) {
          path.remove();
        }
      }
    }
  };
}

function looksLike(a, b) {
  return a && b && Object.keys(b).every(function (bKey) {
    var bVal = b[bKey];
    var aVal = a[bKey];

    if (typeof bVal === 'function') {
      return bVal(aVal);
    }

    return isPrimitive(bVal) ? bVal === aVal : looksLike(aVal, bVal);
  });
}

function isPrimitive(val) {
  return val == null || /^[sbn]/.test(typeof val);
} // eslint-disable-next-line import/no-default-export

function preset(_api, options) {
  if (options === void 0) {
    options = {};
  }

  // const isTest = _api.env('test');
  var isRunningInJest = process.env.JEST_WORKER_ID && !process.env.__NEXT_TEST_MODE;
  var config = {
    presets: [[require('next/babel'), options]],
    plugins: [[require('babel-plugin-superjson-next'), {
      exclude: ['dehydratedState']
    }], AddBlitzAppRoot]
  };

  if (!isRunningInJest) {
    config.plugins.push(RewriteImports);
  }

  return config;
}

exports.default = preset;
