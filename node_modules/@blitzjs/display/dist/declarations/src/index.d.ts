import c from "chalk";
import { Table } from "console-table-printer";
import ora from "ora";
import { Logger } from "tslog";
export declare const table: typeof Table;
export declare const chalk: c.Chalk & c.ChalkFunction & {
    supportsColor: false | c.ColorSupport;
    Level: c.Level;
    Color: "black" | "red" | "green" | "yellow" | "blue" | "magenta" | "cyan" | "white" | "gray" | "bgBlack" | "bgRed" | "bgGreen" | "bgYellow" | "bgBlue" | "bgMagenta" | "bgCyan" | "bgWhite" | "grey" | "redBright" | "greenBright" | "yellowBright" | "blueBright" | "magentaBright" | "cyanBright" | "whiteBright" | "bgGray" | "bgRedBright" | "bgGreenBright" | "bgYellowBright" | "bgBlueBright" | "bgMagentaBright" | "bgCyanBright" | "bgWhiteBright" | "blackBright" | "bgGrey" | "bgBlackBright";
    ForegroundColor: "black" | "red" | "green" | "yellow" | "blue" | "magenta" | "cyan" | "white" | "gray" | "grey" | "redBright" | "greenBright" | "yellowBright" | "blueBright" | "magentaBright" | "cyanBright" | "whiteBright" | "blackBright";
    BackgroundColor: "bgBlack" | "bgRed" | "bgGreen" | "bgYellow" | "bgBlue" | "bgMagenta" | "bgCyan" | "bgWhite" | "bgGray" | "bgRedBright" | "bgGreenBright" | "bgYellowBright" | "bgBlueBright" | "bgMagentaBright" | "bgCyanBright" | "bgWhiteBright" | "bgGrey" | "bgBlackBright";
    Modifiers: "hidden" | "reset" | "bold" | "dim" | "italic" | "underline" | "inverse" | "strikethrough" | "visible";
    stderr: c.Chalk & {
        supportsColor: false | c.ColorSupport;
    };
};
export declare const baseLogger: () => Logger;
export declare const log: {
    withBrand: (str: string) => string;
    withWarning: (str: string) => string;
    withCaret: (str: string) => string;
    withCheck: (str: string) => string;
    withX: (str: string) => string;
    withProgress: (str: string) => string;
    withError: (str: string) => string;
    branded: (msg: string) => void;
    clearLine: (msg?: string | undefined) => void;
    clearConsole: () => void;
    error: (msg: string) => void;
    warning: (msg: string) => void;
    meta: (msg: string) => void;
    progress: (msg: string) => void;
    spinner: (str: string) => ora.Ora;
    success: (msg: string) => void;
    newline: () => void;
    variable: (val: any) => string;
    info: (msg: string) => void;
    debug: any;
    Table: typeof Table;
};
