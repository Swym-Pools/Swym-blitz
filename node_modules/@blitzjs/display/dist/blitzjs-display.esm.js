import { getConfig } from '@blitzjs/config';
import c from 'chalk';
import { Table } from 'console-table-printer';
import ora from 'ora';
import readline from 'readline';
import { Logger } from 'tslog';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var defaultConfig = {
  level: "info"
};

var getLogConfig = function getLogConfig() {
  var config = getConfig(); // TODO - validate log config and print helpfull error if invalid

  if (config.log && typeof config.log === "object") {
    return _extends({}, defaultConfig, config.log);
  }

  return defaultConfig;
};

var table = Table;
var chalk = c; // const blitzTrueBrandColor = '6700AB'

var blitzBrightBrandColor = "8a3df0"; // Using bright brand color so it's better for dark terminals

var brandColor = blitzBrightBrandColor;

var withBrand = function withBrand(str) {
  return c.hex(brandColor).bold(str);
};

var withWarning = function withWarning(str) {
  return "\u26A0\uFE0F  " + c.yellow(str);
};

var withCaret = function withCaret(str) {
  return c.gray(">") + " " + str;
};

var withCheck = function withCheck(str) {
  return c.green("✔") + " " + str;
};

var withX = function withX(str) {
  return c.red.bold("✕") + " " + str;
};

var withProgress = function withProgress(str) {
  return withCaret(str);
};

var withError = function withError(str) {
  return withX(c.red.bold(str));
};
/**
 * Logs a branded purple message to stdout.
 *
 * @param {string} msg
 */


var branded = function branded(msg) {
  console.log(c.hex(brandColor).bold(msg));
};
/**
 * Clears the line and optionally log a message to stdout.
 *
 * @param {string} msg
 */


var clearLine = function clearLine(msg) {
  readline.clearLine(process.stdout, 0);
  readline.cursorTo(process.stdout, 0);
  msg && process.stdout.write(msg);
};

var clearConsole = function clearConsole() {
  if (process.platform === "win32") {
    process.stdout.write("\x1B[2J\x1B[0f");
  } else {
    process.stdout.write("\x1B[2J\x1B[3J\x1B[H");
  }
};
/**
 * Logs a red error message to stderr.
 *
 * @param {string} msg
 */


var warning = function warning(msg) {
  console.log(withCaret(withWarning(msg)));
};
/**
 * Logs a red error message to stderr.
 *
 * @param {string} msg
 */


var error = function error(msg) {
  console.error(withX(c.red.bold(msg)));
};
/**
 * Logs a subtle gray message to stdout.
 *
 * @param {string} msg
 */


var meta = function meta(msg) {
  console.log(withCaret(c.gray(msg)));
};
/**
 * Logs a progress message to stdout.
 *
 * @param {string} msg
 */


var progress = function progress(msg) {
  console.log(withProgress(msg));
};

var info = function info(msg) {
  console.log(c.bold(msg));
};

var spinner = function spinner(str) {
  return ora({
    text: str,
    color: "blue",
    spinner: {
      interval: 120,
      frames: ["◢", "◣", "◤", "◥"]
    }
  });
};
/**
 * Logs a green success message to stdout.
 *
 * @param {string} msg
 */


var success = function success(msg) {
  console.log(withCheck(c.green(msg)));
};

var newline = function newline() {
  var logLevel = getLogConfig().level;

  switch (logLevel) {
    case "trace":
    case "debug":
    case "info":
      console.log(" ");
      break;
  }
};
/**
 * Colorizes a variable for display.
 *
 * @param {string} val
 */


var variable = function variable(val) {
  return c.cyan.bold("" + val);
};
/**
 * If the DEBUG env var is set this will write to the console
 * @param str msg
 */


var debug = /*#__PURE__*/require("debug")("blitz");

var baseLogger = function baseLogger() {
  var _globalThis$_blitz_ba;

  globalThis._blitz_baseLogger = (_globalThis$_blitz_ba = globalThis._blitz_baseLogger) != null ? _globalThis$_blitz_ba : new Logger({
    minLevel: getLogConfig().level,
    dateTimePattern: process.env.NODE_ENV === "production" ? "year-month-day hour:minute:second.millisecond" : "hour:minute:second.millisecond",
    displayFunctionName: false,
    displayFilePath: "hidden",
    displayRequestId: false,
    dateTimeTimezone: process.env.NODE_ENV === "production" ? "utc" : Intl.DateTimeFormat().resolvedOptions().timeZone,
    prettyInspectHighlightStyles: {
      name: "yellow",
      number: "blue",
      bigint: "blue",
      "boolean": "blue"
    },
    maskValuesOfKeys: ["password", "passwordConfirmation"],
    exposeErrorCodeFrame: process.env.NODE_ENV !== "production"
  });
  return globalThis._blitz_baseLogger;
};
var log = {
  withBrand: withBrand,
  withWarning: withWarning,
  withCaret: withCaret,
  withCheck: withCheck,
  withX: withX,
  withProgress: withProgress,
  withError: withError,
  branded: branded,
  clearLine: clearLine,
  clearConsole: clearConsole,
  error: error,
  warning: warning,
  meta: meta,
  progress: progress,
  spinner: spinner,
  success: success,
  newline: newline,
  variable: variable,
  info: info,
  debug: debug,
  Table: Table
};

export { baseLogger, chalk, log, table };
