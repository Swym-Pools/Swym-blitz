"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Routes = void 0;
const tslib_1 = require("tslib");
const display_1 = require("@blitzjs/display");
const command_1 = require("@oclif/command");
class Routes extends command_1.Command {
    getColor(type) {
        switch (type) {
            case "rpc":
                return "magenta";
            case "api":
                return "blue";
            default:
                return "green";
        }
    }
    run() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                rootFolder: process.cwd(),
                env: "dev",
            };
            this.parse(Routes);
            try {
                const { routes } = yield Promise.resolve().then(() => tslib_1.__importStar(require("@blitzjs/server")));
                const routesResult = yield routes(config);
                display_1.log.newline();
                const table = new display_1.table({
                    columns: [
                        { name: "HTTP", alignment: "center" },
                        { name: "Source File", alignment: "left" },
                        { name: "URI", alignment: "left" },
                        { name: "Type", alignment: "center" },
                    ],
                    sort: (q, r) => {
                        // Sort pages to the top
                        if (q.Type === "PAGE" && r.Type !== "PAGE") {
                            return -1;
                        }
                        if (q.Type !== "PAGE" && r.Type === "PAGE") {
                            return 1;
                        }
                        if (q.Type > r.Type) {
                            return 1;
                        }
                        if (q.Type < r.Type) {
                            return -1;
                        }
                        return 0;
                    },
                });
                routesResult.forEach(({ path, uri, verb, type }) => {
                    table.addRow({
                        [table.table.columns[0].name]: verb.toUpperCase(),
                        [table.table.columns[1].name]: path,
                        [table.table.columns[2].name]: uri,
                        [table.table.columns[3].name]: type.toUpperCase(),
                    }, { color: this.getColor(type) });
                });
                console.log(table.render());
            }
            catch (err) {
                console.error(err);
                process.exit(1);
            }
        });
    }
}
exports.Routes = Routes;
Routes.description = "Display all Blitz URL Routes";
Routes.aliases = ["r"];
Routes.flags = {
    help: command_1.flags.help({ char: "h" }),
};
