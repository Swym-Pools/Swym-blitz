"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Db = exports.getDbName = void 0;
const tslib_1 = require("tslib");
const display_1 = require("@blitzjs/display");
const command_1 = require("@oclif/command");
function getDbName(connectionString) {
    const dbUrlParts = connectionString.split("/");
    const dbName = dbUrlParts[dbUrlParts.length - 1];
    return dbName;
}
exports.getDbName = getDbName;
function runSeed() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        require("../utils/setup-ts-node").setupTsnode();
        const projectRoot = require("@blitzjs/config").getProjectRoot();
        const seedPath = require("path").join(projectRoot, "db/seeds");
        const dbPath = require("path").join(projectRoot, "db/index");
        display_1.log.branded("Seeding database");
        let spinner = display_1.log.spinner("Loading seeds\n").start();
        let seeds;
        try {
            seeds = require(seedPath).default;
            if (seeds === undefined) {
                throw new Error(`Cant find default export from db/seeds`);
            }
        }
        catch (err) {
            display_1.log.error(`Couldn't import default from db/seeds.ts or db/seeds/index.ts file`);
            throw err;
        }
        spinner.succeed();
        try {
            console.log("\n" + display_1.log.withCaret("Seeding..."));
            seeds && (yield seeds());
        }
        catch (err) {
            display_1.log.error(err);
            display_1.log.error(`Couldn't run imported function, are you sure it's a function?`);
            throw err;
        }
        const db = require(dbPath).default;
        yield db.$disconnect();
        display_1.log.success("Done seeding");
    });
}
class Db extends command_1.Command {
    run() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            process.env.CLI_COMMAND_DB = "true";
            const { args } = this.parse(Db);
            const command = args["command"];
            if (command === "help") {
                return Db.run(["--help"]);
            }
            if (command === "seed") {
                try {
                    return yield runSeed();
                }
                catch (err) {
                    display_1.log.error("Could not seed database:");
                    display_1.log.error(err);
                    process.exit(1);
                }
            }
            this.log("\nThat command is no longer available..");
            this.log("For any prisma related commands, use the `blitz prisma` command instead:");
            this.log("\n  `blitz prisma COMMAND`\n");
        });
    }
}
exports.Db = Db;
Db.description = `Run database commands
${require("chalk").bold("seed")}   Generates seeded data in database via Prisma 2. You need db/seeds.ts or db/seeds/index.ts.
`;
Db.args = [
    {
        name: "command",
        description: "Run specific db command",
        required: true,
        default: "help",
    },
];
Db.flags = {
    help: command_1.flags.help({ char: "h" }),
};
Db.strict = false;
