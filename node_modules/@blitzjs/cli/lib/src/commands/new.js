"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.New = void 0;
const tslib_1 = require("tslib");
const display_1 = require("@blitzjs/display");
const generator_1 = require("@blitzjs/generator");
const command_1 = require("@oclif/command");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const cross_spawn_1 = tslib_1.__importDefault(require("cross-spawn"));
const hasbin_1 = tslib_1.__importDefault(require("hasbin"));
const semver_1 = require("semver");
const debug = require("debug")("blitz:new");
const command_2 = require("../command");
const prompt_aborted_1 = require("../errors/prompt-aborted");
const prisma_1 = require("./prisma");
class New extends command_2.Command {
    run() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { args, flags } = this.parse(New);
            debug("args: ", args);
            debug("flags: ", flags);
            if (!flags["skip-upgrade"]) {
                const latestVersion = (yield generator_1.getLatestVersion("blitz")).value || this.config.version;
                if (semver_1.lt(this.config.version, latestVersion)) {
                    const upgradeChoices = [
                        { name: "yes", message: `Yes - Upgrade to ${latestVersion}` },
                        {
                            name: "no",
                            message: `No - Continue with old version (${this.config.version}) - NOT recommended`,
                        },
                    ];
                    const promptUpgrade = yield this.enquirer.prompt({
                        type: "select",
                        name: "upgrade",
                        message: "Your global blitz version is outdated. Upgrade?",
                        choices: upgradeChoices,
                    });
                    if (promptUpgrade.upgrade === "yes") {
                        var useYarn = false;
                        const checkYarn = cross_spawn_1.default.sync("yarn", ["global", "list"], { stdio: "pipe" });
                        if (checkYarn && checkYarn.stdout) {
                            useYarn = checkYarn.stdout.toString().includes("blitz@");
                        }
                        const upgradeOpts = useYarn ? ["global", "add", "blitz"] : ["i", "-g", "blitz@latest"];
                        cross_spawn_1.default.sync(useYarn ? "yarn" : "npm", upgradeOpts, { stdio: "inherit" });
                        const versionResult = cross_spawn_1.default.sync("blitz", ["--version"], { stdio: "pipe" });
                        if (versionResult.stdout) {
                            const newVersion = versionResult.stdout.toString().match(/(?<=blitz: )(.*)(?= \(global\))/) || [];
                            if (newVersion[0] && newVersion[0] === latestVersion) {
                                this.log(chalk_1.default.green(`Upgraded blitz global package to ${newVersion[0]}, running blitz new command...`));
                                const flagsArr = Object.keys(flags).reduce((arr, key) => (flags[key] ? [...arr, `--${key}`] : arr), []);
                                cross_spawn_1.default.sync("blitz", ["new", ...Object.values(args), ...flagsArr, "--skip-upgrade"], {
                                    stdio: "inherit",
                                });
                                return;
                            }
                        }
                        this.error("Unable to upgrade blitz, please run `blitz new` again and select No to skip the upgrade");
                    }
                }
            }
            try {
                const destinationRoot = require("path").resolve(args.name);
                const appName = require("path").basename(destinationRoot);
                const formChoices = [
                    { name: "React Final Form", message: "React Final Form (recommended)" },
                    { name: "React Hook Form" },
                    { name: "Formik" },
                ];
                const promptResult = yield this.enquirer.prompt({
                    type: "select",
                    name: "form",
                    message: "Pick a form library (you can switch to something else later if you want)",
                    choices: formChoices,
                });
                const { "dry-run": dryRun, "skip-install": skipInstall, npm } = flags;
                const needsInstall = dryRun || skipInstall;
                const postInstallSteps = [`cd ${args.name}`];
                const AppGenerator = require("@blitzjs/generator").AppGenerator;
                const generator = new AppGenerator({
                    destinationRoot,
                    appName,
                    dryRun,
                    useTs: !flags.js,
                    yarn: !npm,
                    form: promptResult.form,
                    version: this.config.version,
                    skipInstall,
                    skipGit: flags["no-git"],
                    onPostInstall: () => tslib_1.__awaiter(this, void 0, void 0, function* () {
                        const spinner = display_1.log.spinner(display_1.log.withBrand("Initializing SQLite database")).start();
                        try {
                            // Required in order for DATABASE_URL to be available
                            require("dotenv-expand")(require("dotenv-flow").config({ silent: true }));
                            const result = yield prisma_1.runPrisma(["migrate", "dev", "--name", "Initial migration"], true);
                            if (!result)
                                throw new Error();
                            spinner.succeed();
                        }
                        catch (error) {
                            spinner.fail();
                            postInstallSteps.push("blitz prisma migrate dev (when asked, you can name the migration anything)");
                        }
                    }),
                });
                this.log("\n" + display_1.log.withBrand("Hang tight while we set up your new Blitz app!") + "\n");
                yield generator.run();
                if (needsInstall) {
                    postInstallSteps.push(npm ? "npm install" : "yarn");
                    postInstallSteps.push("blitz prisma migrate dev (when asked, you can name the migration anything)");
                }
                postInstallSteps.push("blitz dev");
                this.log("\n" + display_1.log.withBrand("Your new Blitz app is ready! Next steps:") + "\n");
                postInstallSteps.forEach((step, index) => {
                    this.log(chalk_1.default.yellow(`   ${index + 1}. ${step}`));
                });
                this.log(""); // new line
            }
            catch (err) {
                if (err instanceof prompt_aborted_1.PromptAbortedError)
                    this.exit(0);
                this.error(err);
            }
        });
    }
}
exports.New = New;
New.description = "Create a new Blitz project";
New.args = [
    {
        name: "name",
        required: true,
        description: "name of your new project",
    },
];
New.flags = {
    help: command_1.flags.help({ char: "h" }),
    js: command_1.flags.boolean({
        description: "Generates a JS project. TypeScript is the default unless you add this flag.",
        default: false,
        hidden: true,
    }),
    npm: command_1.flags.boolean({
        description: "Use npm as the package manager. Yarn is the default if installed",
        default: !hasbin_1.default.sync("yarn"),
        allowNo: true,
    }),
    "skip-install": command_1.flags.boolean({
        description: "Skip package installation",
        hidden: true,
        default: false,
        allowNo: true,
    }),
    "dry-run": command_1.flags.boolean({
        char: "d",
        description: "Show what files will be created without writing them to disk",
    }),
    "no-git": command_1.flags.boolean({
        description: "Skip git repository creation",
        default: false,
    }),
    "skip-upgrade": command_1.flags.boolean({
        description: "Skip blitz upgrade if outdated",
        default: false,
    }),
};
