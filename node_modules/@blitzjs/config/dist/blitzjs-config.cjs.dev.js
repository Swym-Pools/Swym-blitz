'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var esbuild = require('esbuild');
var fs = require('fs');
var fsExtra = require('fs-extra');
var path = require('path');
var pkgDir = require('pkg-dir');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var fs__default = /*#__PURE__*/_interopDefault(fs);
var path__default = /*#__PURE__*/_interopDefault(path);
var pkgDir__default = /*#__PURE__*/_interopDefault(pkgDir);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var debug = /*#__PURE__*/require("debug")("blitz:config");

function getProjectRoot() {
  return path__default['default'].dirname(getConfigSrcPath());
}
function getConfigSrcPath() {
  var tsPath = path__default['default'].resolve(path__default['default'].join(process.cwd(), "blitz.config.ts"));

  if (fsExtra.existsSync(tsPath)) {
    return tsPath;
  } else {
    var jsPath = path__default['default'].resolve(path__default['default'].join(process.cwd(), "blitz.config.js"));
    return jsPath;
  }
}
function getConfigBuildPath() {
  return path__default['default'].join(getProjectRoot(), ".blitz", "blitz.config.js");
}
async function buildConfig(_temp) {
  var _pkg$dependencies, _pkg$devDependencies;

  var _ref = _temp === void 0 ? {} : _temp,
      watch = _ref.watch;

  debug("Starting buildConfig...");
  var dir = pkgDir__default['default'].sync();

  if (!dir) {
    // This will happen when running blitz no inside a blitz app
    debug("Unable to find package directory");
    return;
  }

  var pkg = fsExtra.readJSONSync(path__default['default'].join(dir, "package.json"));
  var srcPath = getConfigSrcPath();

  if (fs__default['default'].readFileSync(srcPath, "utf8").includes("tsconfig-paths/register")) {
    // User is manually handling their own typescript stuff
    debug("Config contains 'tsconfig-paths/register', so skipping build");
    return;
  }

  var esbuildOptions = {
    entryPoints: [srcPath],
    outfile: getConfigBuildPath(),
    format: "cjs",
    bundle: true,
    platform: "node",
    external: ["blitz", "next"].concat(Object.keys(require("blitz/package").dependencies), Object.keys((_pkg$dependencies = pkg == null ? void 0 : pkg.dependencies) != null ? _pkg$dependencies : {}), Object.keys((_pkg$devDependencies = pkg == null ? void 0 : pkg.devDependencies) != null ? _pkg$devDependencies : {}))
  };

  if (watch) {
    esbuildOptions.watch = {
      onRebuild: function onRebuild(error) {
        if (error) {
          console.error("Failed to re-build blitz config");
        } else {
          console.log("\n> Blitz config changed - restart for changes to take effect\n");
        }
      }
    };
  }

  debug("Building config...");
  debug("Src: ", getConfigSrcPath());
  debug("Build: ", getConfigBuildPath());
  await esbuild.build(esbuildOptions);
}

/**
 * @param {boolean | undefined} reload - reimport config files to reset global cache
 */
var getConfig = function getConfig(reload) {
  var _pkgJson;

  if (global.blitzConfig && Object.keys(global.blitzConfig).length > 0 && !reload) {
    return global.blitzConfig;
  }

  var _require = require("next/constants"),
      PHASE_DEVELOPMENT_SERVER = _require.PHASE_DEVELOPMENT_SERVER,
      PHASE_PRODUCTION_SERVER = _require.PHASE_PRODUCTION_SERVER;

  var pkgJson;
  var pkgJsonPath = path.join(getProjectRoot(), "package.json");

  if (fsExtra.existsSync(pkgJsonPath)) {
    pkgJson = fsExtra.readJSONSync(path.join(getProjectRoot(), "package.json"));
  }

  var blitzConfig = {
    _meta: {
      packageName: (_pkgJson = pkgJson) == null ? void 0 : _pkgJson.name
    }
  };
  var projectRoot = getProjectRoot();
  var nextConfigPath = path__default['default'].join(projectRoot, "next.config.js");
  var blitzConfigPath;

  if (fsExtra.existsSync(path__default['default'].join(projectRoot, ".blitz"))) {
    blitzConfigPath = path__default['default'].join(projectRoot, ".blitz", "blitz.config.js");
  } else {
    // projectRoot is inside .blitz/build/
    blitzConfigPath = path__default['default'].join(projectRoot, "..", "blitz.config.js");
  }

  debug("nextConfigPath: " + nextConfigPath);
  debug("blitzConfigPath: " + blitzConfigPath);
  var loadedNextConfig = {};
  var loadedBlitzConfig = {};

  try {
    // --------------------------------
    // Load next.config.js if it exists
    // --------------------------------
    if (fsExtra.existsSync(nextConfigPath)) {
      // eslint-disable-next-line no-eval -- block webpack from following this module path
      loadedNextConfig = eval("require")(nextConfigPath);

      if (typeof loadedNextConfig === "function") {
        var phase = process.env.NODE_ENV === "production" ? PHASE_PRODUCTION_SERVER : PHASE_DEVELOPMENT_SERVER;
        loadedNextConfig = loadedNextConfig(phase, {});
      }
    } // --------------------------------
    // Load blitz.config.js
    // --------------------------------
    // eslint-disable-next-line no-eval -- block webpack from following this module path


    loadedBlitzConfig = eval("require")(blitzConfigPath);

    if (typeof loadedBlitzConfig === "function") {
      var _phase = process.env.NODE_ENV === "production" ? PHASE_PRODUCTION_SERVER : PHASE_DEVELOPMENT_SERVER;

      loadedBlitzConfig = loadedBlitzConfig(_phase, {});
    } // -------------
    // Merge configs
    // -------------


    blitzConfig = _extends({}, blitzConfig, loadedNextConfig, loadedBlitzConfig);
  } catch (error) {
    debug("Failed to load config in getConfig()", error);
  } // Idk why, but during startup first result of loading blitz config is empty
  // Therefore don't cache it so that next time will load the full config properly


  if (Object.keys(loadedBlitzConfig).length) {
    global.blitzConfig = blitzConfig;
  }

  return blitzConfig;
};

exports.buildConfig = buildConfig;
exports.getConfig = getConfig;
exports.getConfigBuildPath = getConfigBuildPath;
exports.getConfigSrcPath = getConfigSrcPath;
exports.getProjectRoot = getProjectRoot;
