export declare function getProjectRoot(): string;
export declare function getConfigSrcPath(): string;
export declare function getConfigBuildPath(): string;
interface BuildConfigOptions {
    watch?: boolean;
}
export declare function buildConfig({ watch }?: BuildConfigOptions): Promise<void>;
export interface BlitzConfig extends Record<string, unknown> {
    target?: string;
    experimental?: {
        isomorphicResolverImports?: boolean;
        reactRoot?: boolean;
    };
    cli?: {
        clearConsoleOnBlitzDev?: boolean;
        httpProxy?: string;
        httpsProxy?: string;
        noProxy?: string;
    };
    _meta: {
        packageName: string;
    };
    middleware?: Record<string, any> & {
        (req: any, res: any, next: any): Promise<void> | void;
        type?: string;
        config?: {
            cookiePrefix?: string;
        };
    }[];
}
declare global {
    namespace NodeJS {
        interface Global {
            blitzConfig: BlitzConfig;
        }
    }
}
/**
 * @param {boolean | undefined} reload - reimport config files to reset global cache
 */
export declare const getConfig: (reload?: boolean | undefined) => BlitzConfig;
export {};
