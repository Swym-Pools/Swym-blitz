import { MutateOptions, UseMutationOptions, UseMutationResult } from "react-query";
export declare type MutateFunction<TData, TError = unknown, TVariables = unknown, TContext = unknown> = (variables?: TVariables, config?: MutateOptions<TData, TError, TVariables, TContext>) => Promise<TData>;
export declare type MutationResultPair<TData, TError, TVariables, TContext> = [
    MutateFunction<TData, TError, TVariables, TContext>,
    Omit<UseMutationResult<TData, TError>, "mutate" | "mutateAsync">
];
export declare type MutationFunction<TData, TVariables = unknown> = (variables: TVariables, ctx?: any) => Promise<TData>;
export declare function useMutation<TData = unknown, TError = unknown, TVariables = void, TContext = unknown>(mutationResolver: MutationFunction<TData, TVariables>, config?: UseMutationOptions<TData, TError, TVariables, TContext>): MutationResultPair<TData, TError, TVariables, TContext>;
