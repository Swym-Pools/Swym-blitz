import { CancellablePromise, EnhancedResolver, EnhancedResolverRpcClient, ResolverModule, ResolverType, RpcOptions } from "./types";
export declare const executeRpcCall: {
    <TInput, TResult>(apiUrl: string, params: TInput, opts?: RpcOptions): CancellablePromise<TResult>;
    warm(apiUrl: string): Promise<Response> | undefined;
};
declare type IsomorphicEnhancedResolverOptions = {
    warmApiEndpoints?: boolean;
};
export declare function getIsomorphicEnhancedResolver<TInput, TResult>(resolver: ResolverModule<TInput, TResult> | undefined, resolverFilePath: string, resolverName: string, resolverType: ResolverType, target?: undefined, options?: IsomorphicEnhancedResolverOptions): EnhancedResolver<TInput, TResult> | EnhancedResolverRpcClient<TInput, TResult>;
export declare function getIsomorphicEnhancedResolver<TInput, TResult>(resolver: ResolverModule<TInput, TResult> | undefined, resolverFilePath: string, resolverName: string, resolverType: ResolverType, target: "client", options?: IsomorphicEnhancedResolverOptions): EnhancedResolverRpcClient<TInput, TResult>;
export declare function getIsomorphicEnhancedResolver<TInput, TResult>(resolver: ResolverModule<TInput, TResult> | undefined, resolverFilePath: string, resolverName: string, resolverType: ResolverType, target: "server", options?: IsomorphicEnhancedResolverOptions): EnhancedResolver<TInput, TResult>;
export {};
