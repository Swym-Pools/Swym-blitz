/// <reference types="node" />
import { IncomingMessage, ServerResponse } from "http";
import { EmptyPublicData, IsAuthorizedArgs, PublicData, SessionConfig, SessionContext } from "../../auth/auth-types";
import { BlitzApiRequest, BlitzApiResponse, Middleware, MiddlewareResponse } from "../../types";
export interface SimpleRolesIsAuthorized<RoleType = string> {
    ({ ctx, args }: {
        ctx: any;
        args: [roleOrRoles?: RoleType | RoleType[]];
    }): boolean;
}
export declare const simpleRolesIsAuthorized: SimpleRolesIsAuthorized;
export declare const sessionMiddleware: (sessionConfig?: Partial<SessionConfig>) => Middleware;
declare type JwtPayload = AnonymousSessionPayload | null;
declare type AnonSessionKernel = {
    handle: string;
    publicData: EmptyPublicData;
    jwtPayload: JwtPayload;
    antiCSRFToken: string;
    anonymousSessionToken: string;
};
declare type AuthedSessionKernel = {
    handle: string;
    publicData: PublicData;
    jwtPayload: JwtPayload;
    antiCSRFToken: string;
    sessionToken: string;
};
declare type SessionKernel = AnonSessionKernel | AuthedSessionKernel;
export declare function getSession(req: BlitzApiRequest | IncomingMessage, res: BlitzApiResponse | ServerResponse): Promise<SessionContext>;
export declare class SessionContextClass implements SessionContext {
    private _req;
    private _res;
    private _kernel;
    constructor(req: BlitzApiRequest, res: MiddlewareResponse, kernel: SessionKernel);
    get $handle(): string;
    get userId(): unknown;
    get $publicData(): EmptyPublicData | {
        userId: unknown;
    };
    $authorize(...args: IsAuthorizedArgs): void;
    $isAuthorized(...args: IsAuthorizedArgs): boolean;
    $create(publicData: PublicData, privateData?: Record<any, any>): Promise<void>;
    $revoke(): Promise<void>;
    $revokeAll(): Promise<void>;
    $setPublicData(data: Record<any, any>): Promise<void>;
    $getPrivateData(): Promise<Record<any, any>>;
    $setPrivateData(data: Record<any, any>): Promise<void>;
}
export declare const generateEssentialSessionHandle: () => string;
export declare const generateAnonymousSessionHandle: () => string;
export declare const createSessionToken: (handle: string, publicData: PublicData | string) => string;
export declare const parseSessionToken: (token: string) => {
    handle: string;
    id: string;
    hashedPublicData: string;
    version: string;
};
export declare const createPublicDataToken: (publicData: string | PublicData | EmptyPublicData) => string;
export declare const createAntiCSRFToken: () => string;
export declare type AnonymousSessionPayload = {
    isAnonymous: true;
    handle: string;
    publicData: EmptyPublicData;
    antiCSRFToken: string;
};
export declare const getSessionSecretKey: () => string;
export declare const createAnonymousSessionToken: (payload: AnonymousSessionPayload) => string;
export declare const parseAnonymousSessionToken: (token: string) => JwtPayload;
export declare const setCookie: (res: ServerResponse, cookie: string) => void;
export declare const setHeader: (res: ServerResponse, name: string, value: string) => void;
export declare const removeHeader: (res: ServerResponse, name: string) => void;
export declare const setSessionCookie: (req: IncomingMessage, res: ServerResponse, sessionToken: string, expiresAt: Date) => void;
export declare const setAnonymousSessionCookie: (req: IncomingMessage, res: ServerResponse, token: string, expiresAt: Date) => void;
export declare const setCSRFCookie: (req: IncomingMessage, res: ServerResponse, antiCSRFToken: string, expiresAt: Date) => void;
export declare const setPublicDataCookie: (req: IncomingMessage, res: ServerResponse, publicDataToken: string, expiresAt: Date) => void;
export declare function getSessionKernel(req: BlitzApiRequest, res: ServerResponse): Promise<SessionKernel | null>;
interface CreateNewAnonSession {
    req: IncomingMessage;
    res: ServerResponse;
    publicData: EmptyPublicData;
    privateData?: Record<any, any>;
    anonymous: true;
    jwtPayload?: JwtPayload;
}
interface CreateNewAuthedSession {
    req: IncomingMessage;
    res: ServerResponse;
    publicData: PublicData;
    privateData?: Record<any, any>;
    anonymous: false;
    jwtPayload?: JwtPayload;
}
export declare function createNewSession(args: CreateNewAnonSession | CreateNewAuthedSession): Promise<SessionKernel>;
export declare function createAnonymousSession(req: IncomingMessage, res: ServerResponse): Promise<SessionKernel>;
export declare function refreshSession(req: IncomingMessage, res: ServerResponse, sessionKernel: SessionKernel, { publicDataChanged }: {
    publicDataChanged: boolean;
}): Promise<void>;
export declare function getAllSessionHandlesForUser(userId: PublicData["userId"]): Promise<string[]>;
export declare function syncPubicDataFieldsForUserIfNeeded(userId: PublicData["userId"], data: Record<string, unknown>): Promise<void>;
export declare function revokeSession(req: IncomingMessage, res: ServerResponse, handle: string, anonymous?: boolean): Promise<void>;
export declare function revokeMultipleSessions(req: IncomingMessage, res: ServerResponse, sessionHandles: string[]): Promise<string[]>;
export declare function revokeAllSessionsForUser(req: IncomingMessage, res: ServerResponse, userId: PublicData["userId"]): Promise<string[]>;
export declare function getPublicData(sessionKernel: SessionKernel): Promise<PublicData | EmptyPublicData>;
export declare function getPrivateData(handle: string): Promise<Record<any, any> | null>;
export declare function setPrivateData(sessionKernel: SessionKernel, data: Record<any, any>): Promise<void>;
export declare function setPublicData(req: IncomingMessage, res: ServerResponse, sessionKernel: SessionKernel, data: Record<any, any>): Promise<{
    userId: unknown;
}>;
/**
 * Append additional header `field` with value `val`.
 *
 * Example:
 *
 *    append(res, 'Set-Cookie', 'foo=bar; Path=/; HttpOnly');
 *
 * @param {ServerResponse} res
 * @param {string} field
 * @param {string| string[]} val
 */
export declare function append(res: ServerResponse, field: string, val: string | string[]): ServerResponse;
export {};
