/// <reference types="node" />
import { IncomingMessage, ServerResponse } from "http";
import { BlitzApiRequest, BlitzApiResponse, ConnectMiddleware, EnhancedResolver, Middleware } from "../types";
export declare function getAllMiddlewareForModule<TInput, TResult>(resolverModule: EnhancedResolver<TInput, TResult>): Middleware<{}>[];
export declare function handleRequestWithMiddleware(req: BlitzApiRequest | IncomingMessage, res: BlitzApiResponse | ServerResponse, middleware: Middleware | Middleware[], { throwOnError, stackPrintOnError, }?: {
    throwOnError?: boolean;
    stackPrintOnError?: boolean;
}): Promise<void>;
export declare function compose(middleware: Middleware[]): Middleware<{}>;
/**
 * Returns a Blitz middleware function that varies its async logic based on if the
 * given middleware function declares at least 3 parameters, i.e. includes
 * the `next` callback function
 */
export declare function connectMiddleware(middleware: ConnectMiddleware): Middleware;
