import { UseInfiniteQueryOptions, UseInfiniteQueryResult, UseQueryOptions, UseQueryResult } from "react-query";
import { FirstParam, PromiseReturnType, QueryFn } from "./types";
import { QueryCacheFunctions } from "./utils/react-query-utils";
declare type QueryLazyOptions = {
    suspense: unknown;
} | {
    enabled: unknown;
};
declare type QueryNonLazyOptions = {
    suspense: true;
    enabled?: never;
} | {
    suspense?: never;
    enabled: true;
} | {
    suspense: true;
    enabled: true;
} | {
    suspense?: never;
    enabled?: never;
};
declare type RestQueryResult<TResult> = Omit<UseQueryResult<TResult>, "data"> & QueryCacheFunctions<TResult>;
export declare function useQuery<T extends QueryFn, TResult = PromiseReturnType<T>>(queryFn: T, params: FirstParam<T>, options?: UseQueryOptions<TResult> & QueryNonLazyOptions): [TResult, RestQueryResult<TResult>];
export declare function useQuery<T extends QueryFn, TResult = PromiseReturnType<T>>(queryFn: T, params: FirstParam<T>, options: UseQueryOptions<TResult> & QueryLazyOptions): [TResult | undefined, RestQueryResult<TResult>];
declare type RestPaginatedResult<TResult> = Omit<UseQueryResult<TResult>, "data"> & QueryCacheFunctions<TResult>;
export declare function usePaginatedQuery<T extends QueryFn, TResult = PromiseReturnType<T>>(queryFn: T, params: FirstParam<T>, options?: UseQueryOptions<TResult> & QueryNonLazyOptions): [TResult, RestPaginatedResult<TResult>];
export declare function usePaginatedQuery<T extends QueryFn, TResult = PromiseReturnType<T>>(queryFn: T, params: FirstParam<T>, options: UseQueryOptions<TResult> & QueryLazyOptions): [TResult | undefined, RestPaginatedResult<TResult>];
interface RestInfiniteResult<TResult> extends Omit<UseInfiniteQueryResult<TResult>, "data">, QueryCacheFunctions<TResult> {
    pageParams: any;
}
interface InfiniteQueryConfig<TResult> extends UseInfiniteQueryOptions<TResult> {
}
export declare function useInfiniteQuery<T extends QueryFn, TResult = PromiseReturnType<T>>(queryFn: T, getQueryParams: (pageParam: any) => FirstParam<T>, options: InfiniteQueryConfig<TResult> & QueryNonLazyOptions): [TResult[], RestInfiniteResult<TResult>];
export declare function useInfiniteQuery<T extends QueryFn, TResult = PromiseReturnType<T>>(queryFn: T, getQueryParams: (pageParam: any) => FirstParam<T>, options: InfiniteQueryConfig<TResult> & QueryLazyOptions): [TResult[] | undefined, RestInfiniteResult<TResult>];
export {};
