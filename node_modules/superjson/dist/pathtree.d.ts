export declare type Tree<T> = InnerNode<T> | Leaf<T>;
declare type Leaf<T> = [T];
declare type InnerNode<T> = [T, Record<string, Tree<T>>];
export declare type CollapsedRootTree<T> = Tree<T> | Record<string, Tree<T>> | undefined;
export declare function traversePathTree<T>(tree: CollapsedRootTree<T>, walker: (v: T, path: string[]) => void, origin?: string[]): void;
export {};
