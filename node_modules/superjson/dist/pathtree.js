"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
exports.__esModule = true;
exports.traversePathTree = void 0;
var pathstringifier_1 = require("./pathstringifier");
var is_1 = require("./is");
var util_1 = require("./util");
function traversePathTree(tree, walker, origin) {
    if (origin === void 0) { origin = []; }
    if (!tree) {
        return;
    }
    if (!is_1.isArray(tree)) {
        util_1.forEach(tree, function (subtree, key) {
            return traversePathTree(subtree, walker, __spread(origin, pathstringifier_1.parsePath(key)));
        });
        return;
    }
    if (tree.length === 1) {
        var _a = __read(tree, 1), nodeValue = _a[0];
        walker(nodeValue, origin);
    }
    else {
        var _b = __read(tree, 2), nodeValue = _b[0], children = _b[1];
        util_1.forEach(children, function (child, key) {
            traversePathTree(child, walker, __spread(origin, pathstringifier_1.parsePath(key)));
        });
        walker(nodeValue, origin);
    }
}
exports.traversePathTree = traversePathTree;
//# sourceMappingURL=pathtree.js.map