"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
exports.__esModule = true;
exports.applyAnnotations = exports.createReferentialEqualityAnnotation = void 0;
var accessDeep_1 = require("./accessDeep");
var transformer_1 = require("./transformer");
var pathstringifier_1 = require("./pathstringifier");
var lodash_1 = require("lodash");
var is_1 = require("./is");
var walker_1 = require("./walker");
function createReferentialEqualityAnnotation(identitites) {
    var result = {};
    var rootEqualityPaths = undefined;
    identitites.forEach(function (paths) {
        if (paths.length <= 1) {
            return;
        }
        var _a = __read(paths
            .map(function (path) { return path.map(String); })
            .sort(function (a, b) { return a.length - b.length; })), shortestPath = _a[0], identicalPaths = _a.slice(1);
        if (shortestPath.length === 0) {
            rootEqualityPaths = identicalPaths.map(pathstringifier_1.stringifyPath);
        }
        else {
            result[pathstringifier_1.stringifyPath(shortestPath)] = identicalPaths.map(pathstringifier_1.stringifyPath);
        }
    });
    if (rootEqualityPaths) {
        if (is_1.isEmptyObject(result)) {
            return [rootEqualityPaths];
        }
        else {
            return [rootEqualityPaths, result];
        }
    }
    else {
        return is_1.isEmptyObject(result) ? undefined : result;
    }
}
exports.createReferentialEqualityAnnotation = createReferentialEqualityAnnotation;
var applyAnnotations = function (plain, annotations) {
    if (annotations.values) {
        walker_1.traverse(annotations.values, function (type, path) {
            plain = accessDeep_1.setDeep(plain, path, function (v) { return transformer_1.untransformValue(v, type); });
        });
    }
    if (annotations.referentialEqualities) {
        if (is_1.isArray(annotations.referentialEqualities)) {
            lodash_1.forEach(annotations.referentialEqualities[0], function (identicalPath) {
                plain = accessDeep_1.setDeep(plain, pathstringifier_1.parsePath(identicalPath), function () { return plain; });
            });
        }
        lodash_1.forEach(is_1.isArray(annotations.referentialEqualities)
            ? annotations.referentialEqualities[1]
            : annotations.referentialEqualities, function (identicalPaths, path) {
            var object = accessDeep_1.getDeep(plain, pathstringifier_1.parsePath(path));
            identicalPaths.map(pathstringifier_1.parsePath).forEach(function (identicalObjectPath) {
                plain = accessDeep_1.setDeep(plain, identicalObjectPath, function () { return object; });
            });
        });
    }
    return plain;
};
exports.applyAnnotations = applyAnnotations;
//# sourceMappingURL=annotator.js.map